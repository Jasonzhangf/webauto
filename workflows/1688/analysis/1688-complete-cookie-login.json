{
  "name": "1688 单页面手动登录（修正版）",
  "description": "使用预登录方法成功进入主页，然后跳转到登录页，只保留一个页面",
  "version": "1.0.0",
  "nodes": [
    { "id": "start", "type": "StartNode", "name": "开始", "next": ["attach_session"] },

    {
      "id": "attach_session",
      "type": "AttachSessionNode",
      "name": "接续预登录会话",
      "config": {},
      "next": ["navigate_to_login"]
    },

    {
      "id": "navigate_to_login",
      "type": "NavigationNode",
      "name": "从主页跳转到登录页",
      "config": {
        "url": "https://login.1688.com/member/signin.htm",
        "waitUntil": "domcontentloaded",
        "timeout": 30000
      },
      "next": ["wait_login_page"]
    },

    {
      "id": "wait_login_page",
      "type": "WaitNode",
      "name": "等待登录页面稳定",
      "config": { "minMs": 3000, "maxMs": 5000 },
      "next": ["check_login_page"]
    },

    {
      "id": "check_login_page",
      "type": "PageSnapshotNode",
      "name": "检查登录页面状态",
      "config": {
        "script": "console.log('🔍 检查1688登录页面...'); const pageTitle = document.title; const pageUrl = window.location.href; const hasLoginForm = document.querySelector('#login-form, .login-form, [class*=login]') !== null; const hasUsernameInput = document.querySelector('input[name=username], input[type=email], input[type=text]') !== null; const hasPasswordInput = document.querySelector('input[name=password], input[type=password]') !== null; console.log('页面标题:', pageTitle); console.log('当前URL:', pageUrl); console.log('是否有登录表单:', hasLoginForm); console.log('是否有用户名输入框:', hasUsernameInput); console.log('是否有密码输入框:', hasPasswordInput); return { success: true, pageTitle, pageUrl, hasLoginForm, hasUsernameInput, hasPasswordInput, isLoginPage: hasLoginForm && (hasUsernameInput || hasPasswordInput), timestamp: new Date().toISOString() };",
        "saveScreenshots": true
      },
      "next": ["wait_manual_login"]
    },

    {
      "id": "wait_manual_login",
      "type": "PageSnapshotNode",
      "name": "等待手动登录完成",
      "config": {
        "script": "console.log('⏳ 等待用户手动登录...'); const pageTitle = document.title; const pageUrl = window.location.href; const isLoggedIn = document.body.textContent.includes('登录') === false || document.querySelector('.user-name, [class*=user], [class*=login][style*=none]') !== null; const hasLoginSuccess = document.querySelector('.welcome, .user-info, [class*=welcome]') !== null; console.log('当前页面标题:', pageTitle); console.log('当前URL:', pageUrl); console.log('是否已登录:', isLoggedIn); console.log('是否有登录成功标识:', hasLoginSuccess); return { success: true, pageTitle, pageUrl, isLoggedIn, hasLoginSuccess, needsManualLogin: !isLoggedIn && !hasLoginSuccess, timestamp: new Date().toISOString() };",
        "saveScreenshots": false
      },
      "next": ["check_login_status"]
    },

    {
      "id": "check_login_status",
      "type": "PageSnapshotNode",
      "name": "检查登录状态",
      "config": {
        "script": "console.log('🔐 检查登录状态...'); const pageTitle = document.title; const pageUrl = window.location.href; const isLoggedIn = document.body.textContent.includes('登录') === false || document.querySelector('.user-name, [class*=user], [class*=login][style*=none]') !== null; const hasLoginSuccess = document.querySelector('.welcome, .user-info, [class*=welcome]') !== null; const is1688Domain = pageUrl.includes('1688.com'); console.log('最终登录检查 - 页面标题:', pageTitle); console.log('最终登录检查 - 当前URL:', pageUrl); console.log('最终登录检查 - 是否已登录:', isLoggedIn); console.log('最终登录检查 - 是否在1688域名:', is1688Domain); return { success: isLoggedIn && is1688Domain, pageTitle, pageUrl, isLoggedIn, hasLoginSuccess, is1688Domain, timestamp: new Date().toISOString() };",
        "saveScreenshots": true
      },
      "next": ["save_complete_cookies"]
    },

    {
      "id": "save_complete_cookies",
      "type": "CookieSaverNode",
      "name": "保存完整Cookie",
      "config": {
        "outputFile": "/Users/fanzhang/.webauto/cookies/1688-manual-complete-cookies.json",
        "cookiePath": "/Users/fanzhang/.webauto/cookies/1688-manual-complete-cookies.json",
        "includeAllDomains": true,
        "includeSessionCookies": true,
        "includeHttpOnly": true,
        "includeSecure": true
      },
      "next": ["navigate_home_after_login"]
    },

    {
      "id": "navigate_home_after_login",
      "type": "NavigationNode",
      "name": "登录后导航到主页",
      "config": {
        "url": "https://www.1688.com/",
        "waitUntil": "domcontentloaded",
        "timeout": 30000
      },
      "next": ["wait_home_after_login"]
    },

    {
      "id": "wait_home_after_login",
      "type": "WaitNode",
      "name": "等待主页稳定",
      "config": { "minMs": 5000, "maxMs": 8000 },
      "next": ["final_verification"]
    },

    {
      "id": "final_verification",
      "type": "PageSnapshotNode",
      "name": "最终验证登录状态",
      "config": {
        "script": "console.log('✅ 最终验证登录状态...'); const pageTitle = document.title; const pageUrl = window.location.href; const isVerification = pageTitle.includes('验证码') || document.body.textContent.includes('验证码') || document.body.textContent.includes('verification'); const hasNormalContent = document.querySelectorAll('.search-box, .nav-menu, .banner, [class*=search]').length > 0; const hasProducts = document.querySelectorAll('.offer-item, .product-item, [class*=offer]').length > 0; const isLoggedIn = document.body.textContent.includes('登录') === false || document.querySelector('.user-name, [class*=user], [class*=login][style*=none]') !== null; console.log('最终页面标题:', pageTitle); console.log('最终URL:', pageUrl); console.log('是否被验证码拦截:', isVerification); console.log('是否有正常主页内容:', hasNormalContent); console.log('是否有产品内容:', hasProducts); console.log('登录状态:', isLoggedIn); return { success: isLoggedIn && !isVerification && (hasNormalContent || hasProducts), pageTitle, pageUrl, isVerification, hasNormalContent, hasProducts, isLoggedIn, isHomepage: pageUrl.includes('1688.com') && !pageUrl.includes('s.1688.com'), timestamp: new Date().toISOString() };",
        "saveScreenshots": true
      },
      "next": ["save_results"]
    },

    {
      "id": "save_results",
      "type": "ResultSaverNode",
      "name": "保存测试结果",
      "config": {
        "outputDir": "workflows/records",
        "filenameTemplate": "1688-complete-cookie-login-{timestamp}.json",
        "includeMetadata": true
      },
      "next": ["end"]
    },

    {
      "id": "end",
      "type": "EndNode",
      "name": "保持页面打开",
      "config": { "cleanup": false, "saveLogs": true }
    }
  ],
  "globalConfig": {
    "logLevel": "info",
    "screenshotOnError": true,
    "autoCleanup": false,
    "parallelExecution": false,
    "timeout": 1800000
  }
}