{
  "name": "1688钢化膜页面结构分析",
  "description": "分析1688钢化膜搜索结果页面的HTML结构，找到正确的选择器",
  "version": "1.0.0",
  "preflows": ["1688-login-preflow"],
  "nodes": [
    { "id": "start", "type": "StartNode", "name": "开始", "next": ["attach"] },
    {
      "id": "attach",
      "type": "AttachSessionNode",
      "name": "会话接力",
      "config": {},
      "next": ["navigate_search"]
    },
    {
      "id": "navigate_search",
      "type": "NavigationNode",
      "name": "导航到钢化膜搜索页",
      "config": {
        "url": "https://s.1688.com/selloffer/offer_search.htm?keywords=%B8%D6%BB%AF%C4%A4",
        "waitUntil": "domcontentloaded",
        "timeout": 30000
      },
      "next": ["wait_search"]
    },
    {
      "id": "wait_search",
      "type": "WaitNode",
      "name": "等待搜索结果加载",
      "config": { "minMs": 3000, "maxMs": 5000 },
      "next": ["analyze_structure"]
    },
    {
      "id": "analyze_structure",
      "type": "PageSnapshotNode",
      "name": "分析页面结构",
      "config": {
        "script": "console.log('🔍 开始分析1688钢化膜搜索结果页面结构...');\n\n// 1. 分析页面基本信息\nconst pageInfo = {\n  url: window.location.href,\n  title: document.title,\n  timestamp: new Date().toISOString()\n};\n\n// 2. 尝试多种选择器寻找商品项\nconst selectors = [\n  '.sm-offer-item',\n  '.offer-item', \n  '.sm-offer',\n  '[class*=offer]',\n  '.sm-offer-item-wrapper',\n  '.s-widget-offer',\n  '.offer-list-item',\n  '.sm-offer-card',\n  '[class*=product]',\n  '[class*=goods]'\n];\n\nconst selectorResults = {};\nlet bestSelector = null;\nlet maxItems = 0;\n\nselectors.forEach(selector => {\n  const items = document.querySelectorAll(selector);\n  selectorResults[selector] = items.length;\n  console.log(`选择器 ${selector}: 找到 ${items.length} 个元素`);\n  \n  if (items.length > maxItems) {\n    maxItems = items.length;\n    bestSelector = selector;\n  }\n});\n\nconsole.log(`最佳选择器: ${bestSelector} (${maxItems} 个元素)`);\n\n// 3. 分析最佳选择器的第一个元素\nlet firstItemAnalysis = null;\nif (bestSelector && maxItems > 0) {\n  const firstItem = document.querySelector(bestSelector);\n  \n  if (firstItem) {\n    // 查找所有可能的链接\n    const allLinks = firstItem.querySelectorAll('a');\n    const links1688 = Array.from(allLinks).filter(link => link.href && link.href.includes('1688.com'));\n    \n    // 查找标题\n    const titleSelectors = ['h4', 'h3', 'h2', '[class*=title]', '[class*=name]', 'a[title]', '.title', '.name'];\n    let title = null;\n    \n    for (const titleSel of titleSelectors) {\n      const titleEl = firstItem.querySelector(titleSel);\n      if (titleEl) {\n        title = titleEl.textContent.trim() || titleEl.title || titleEl.getAttribute('alt');\n        if (title) break;\n      }\n    }\n    \n    // 查找图片\n    const images = firstItem.querySelectorAll('img');\n    const validImages = Array.from(images).filter(img => img.src && !img.src.includes('placeholder'));\n    \n    // 查找价格\n    const priceSelectors = ['[class*=price]', '[data-price]', '.price', '.yuan', '[class*=money]'];\n    let price = null;\n    \n    for (const priceSel of priceSelectors) {\n      const priceEl = firstItem.querySelector(priceSel);\n      if (priceEl) {\n        price = priceEl.textContent.trim();\n        if (price) break;\n      }\n    }\n    \n    firstItemAnalysis = {\n      html: firstItem.outerHTML.substring(0, 1000) + '...',\n      className: firstItem.className,\n      tagName: firstItem.tagName,\n      linkCount: allLinks.length,\n      validLinks: links1688.map(link => ({\n        href: link.href,\n        text: link.textContent.trim(),\n        title: link.title\n      })),\n      title: title,\n      imageCount: validImages.length,\n      firstImage: validImages.length > 0 ? validImages[0].src : null,\n      price: price\n    };\n  }\n}\n\n// 4. 分析页面整体结构\nconst mainContainer = document.querySelector('.sm-offer-list, .offer-list, [class*=list], [class*=container], .sm-search-result');\nconst containerInfo = mainContainer ? {\n  exists: true,\n  className: mainContainer.className,\n  tagName: mainContainer.tagName,\n  childCount: mainContainer.children.length\n} : { exists: false };\n\n// 5. 分析分页\nconst pagination = document.querySelector('.ui-pagination, .pagination, [class*=page]');\nconst paginationInfo = pagination ? {\n  exists: true,\n  className: pagination.className,\n  html: pagination.outerHTML.substring(0, 500) + '...'\n} : { exists: false };\n\n// 6. 分析可能的点击元素\nconst clickableElements = document.querySelectorAll('a[href*=\"1688.com\"], [onclick*=\"1688.com\"], [class*=clickable]');\nconst clickAnalysis = {\n  totalClickable: clickableElements.length,\n  uniqueHrefs: [...new Set(Array.from(clickableElements).map(el => el.href))].length,\n  sampleLinks: Array.from(clickableElements).slice(0, 5).map(el => ({\n    href: el.href,\n    text: el.textContent.trim().substring(0, 50),\n    className: el.className\n  }))\n};\n\nconst analysisResult = {\n  pageInfo,\n  selectorResults,\n  bestSelector,\n  maxItems,\n  firstItemAnalysis,\n  containerInfo,\n  paginationInfo,\n  clickAnalysis,\n  success: true,\n  timestamp: new Date().toISOString()\n};\n\nconsole.log('页面结构分析完成');\nconsole.log('找到的商品元素数量:', maxItems);\nconsole.log('最佳选择器:', bestSelector);\n\nif (firstItemAnalysis && firstItemAnalysis.validLinks.length > 0) {\n  console.log('第一条有效链接:', firstItemAnalysis.validLinks[0].href);\n  console.log('第一条标题:', firstItemAnalysis.title);\n}\n\nreturn analysisResult;",
        "saveScreenshots": true
      },
      "next": ["save_results"]
    },
    {
      "id": "save_results",
      "type": "ResultSaverNode",
      "name": "保存分析结果",
      "config": {
        "outputDir": "workflows/records",
        "filenameTemplate": "1688-glass-film-structure-analysis-{timestamp}.json",
        "includeMetadata": true,
        "mergeData": true
      },
      "next": ["end"]
    },
    {
      "id": "end",
      "type": "EndNode",
      "name": "结束",
      "config": { "cleanup": false, "saveLogs": true }
    }
  ],
  "globalConfig": {
    "logLevel": "info",
    "screenshotOnError": true,
    "autoCleanup": false,
    "parallelExecution": false,
    "timeout": 180000
  }
}