{
  "name": "独立锚点测试",
  "description": "独立进行登录并测试锚点选择器",
  "version": "1.0.0",
  "nodes": [
    {
      "id": "start",
      "type": "StartNode",
      "next": ["camoufox_ensure"]
    },
    {
      "id": "camoufox_ensure",
      "type": "CamoufoxEnsureNode",
      "next": ["browser_init"]
    },
    {
      "id": "browser_init",
      "type": "BrowserInitNode",
      "config": {
        "engine": "camoufox",
        "headless": false,
        "viewport": { "width": 1920, "height": 1080 },
        "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
        "strictAutomationMitigation": true,
        "extraHeaders": true
      },
      "next": ["load_cookies"]
    },
    {
      "id": "load_cookies",
      "type": "CookieLoaderNode",
      "config": {
        "cookieFile": "./cookies/1688-domestic.json"
      },
      "next": ["navigate_1688"]
    },
    {
      "id": "navigate_1688",
      "type": "NavigationNode",
      "config": {
        "url": "https://www.1688.com/",
        "waitUntil": "networkidle",
        "timeout": 15000
      },
      "next": ["test_anchors"]
    },
    {
      "id": "test_anchors",
      "type": "JavaScriptExecutionNode",
      "config": {
        "script": "// 测试各种锚点选择器\nconsole.log('=== 测试1688页面锚点选择器 ===');\n\nconst testSelectors = [\n  '.userAvatarLogo img',\n  '.username', \n  '.user-info',\n  '.header-user',\n  '.login-user',\n  '[data-spm-anchor-id*=\\\"user\\\"]',\n  '.member-nickname',\n  '.name',\n  '.user-name',\n  '.avatar',\n  '.header-avatar',\n  '.s-login-info',\n  '.user-info-wrapper',\n  '.ui-header',\n  '.head-user-info',\n  '.login-info'\n];\n\nconst results = {};\nlet foundValidAnchor = false;\nlet workingSelector = null;\n\ntestSelectors.forEach(selector => {\n  try {\n    const elements = document.querySelectorAll(selector);\n    if (elements.length > 0) {\n      const visibleElements = Array.from(elements).filter(el => {\n        const style = window.getComputedStyle(el);\n        return style.display !== 'none' && style.visibility !== 'hidden' && el.offsetWidth > 0 && el.offsetHeight > 0;\n      });\n      \n      results[selector] = {\n        total: elements.length,\n        visible: visibleElements.length,\n        elements: visibleElements.slice(0, 2).map(el => ({\n          tagName: el.tagName,\n          text: el.textContent?.trim().substring(0, 50),\n          className: el.className,\n          id: el.id\n        }))\n      };\n      \n      if (visibleElements.length > 0 && !foundValidAnchor) {\n        foundValidAnchor = true;\n        workingSelector = selector;\n        \n        // 高亮第一个可见元素\n        const firstVisible = visibleElements[0];\n        firstVisible.style.setProperty('outline', '4px solid #007AFF', 'important');\n        firstVisible.style.setProperty('background', 'rgba(0, 122, 255, 0.2)', 'important');\n        \n        // 添加标签\n        const label = document.createElement('div');\n        label.textContent = 'WORKING_ANCHOR';\n        label.style.cssText = `\n          position: absolute;\n          top: ${firstVisible.getBoundingClientRect().top - 30}px;\n          left: ${firstVisible.getBoundingClientRect().left}px;\n          background: #007AFF;\n          color: white;\n          padding: 4px 8px;\n          font-size: 12px;\n          font-weight: bold;\n          z-index: 999999;\n          border-radius: 4px;\n        `;\n        document.body.appendChild(label);\n      }\n    } else {\n      results[selector] = { total: 0, visible: 0 };\n    }\n  } catch (e) {\n    results[selector] = { error: e.message };\n  }\n});\n\nconsole.log('锚点选择器测试结果:', JSON.stringify(results, null, 2));\nconsole.log('找到有效锚点:', foundValidAnchor, '选择器:', workingSelector);\n\n// 如果没有找到锚点，查找页面上的所有可见元素作为备选\nif (!foundValidAnchor) {\n  console.log('=== 查找页面上的可见元素作为备选锚点 ===');\n  const allVisible = [];\n  const allElements = document.querySelectorAll('*');\n  \n  allElements.forEach(el => {\n    if (el.offsetWidth > 0 && el.offsetHeight > 0) {\n      const rect = el.getBoundingClientRect();\n      const text = el.textContent?.trim();\n      \n      // 查找头部区域的重要元素\n      if (rect.top < 200 && rect.left > 0 && rect.left < window.innerWidth) {\n        const tagName = el.tagName.toLowerCase();\n        const className = el.className?.toLowerCase() || '';\n        const id = el.id?.toLowerCase() || '';\n        \n        if ((tagName === 'div' || tagName === 'span' || tagName === 'a' || tagName === 'img') &&\n            (className.includes('header') || className.includes('user') || className.includes('login') ||\n             id.includes('header') || id.includes('user') || id.includes('login') ||\n             (text && text.length > 0 && text.length < 50))) {\n          \n          allVisible.push({\n            tagName: el.tagName,\n            className: el.className,\n            id: el.id,\n            text: text?.substring(0, 30),\n            rect: {\n              top: rect.top,\n              left: rect.left,\n              width: rect.width,\n              height: rect.height\n            }\n          });\n          \n          // 高亮前5个备选元素\n          if (allVisible.length <= 5) {\n            el.style.setProperty('outline', '2px solid #FF6B6B', 'important');\n            el.style.setProperty('background', 'rgba(255, 107, 107, 0.1)', 'important');\n          }\n        }\n      }\n    }\n  });\n  \n  console.log('找到头部可见元素数量:', allVisible.length);\n  console.log('前10个头部元素:', allVisible.slice(0, 10));\n  \n  results.backupElements = allVisible.slice(0, 10);\n}\n\nreturn {\n  selectorResults: results,\n  foundValidAnchor,\n  workingSelector,\n  currentUrl: window.location.href,\n  pageTitle: document.title,\n  pageReady: document.readyState === 'complete'\n};"
      },
      "next": ["end"]
    },
    {
      "id": "end",
      "type": "EndNode",
      "config": {
        "cleanupHighlights": false,
        "persistSession": false
      }
    }
  ]
}