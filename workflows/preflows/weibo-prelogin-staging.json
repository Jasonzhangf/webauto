{
  "name": "Weibo Prelogin Staging Validation",
  "globalConfig": { "logLevel": "info", "timeout": 600000 },
  "nodes": [
    { "id": "start", "type": "StartNode", "name": "开始", "next": ["browser"] },
    { "id": "browser", "type": "BrowserInitNode", "name": "启动浏览器", "config": { "headless": false, "viewport": { "width": 1440, "height": 900 } }, "next": ["cookies"] },
    { "id": "cookies", "type": "CookieLoaderNode", "name": "加载Cookie", "config": { "cookiePath": "~/.webauto/weibo-cookies.json" }, "next": ["nav"] },
    { "id": "nav", "type": "NavigationNode", "name": "访问微博首页", "config": { "url": "https://weibo.com", "waitUntil": "domcontentloaded", "timeout": 30000 }, "next": ["wait"] },
    { "id": "wait", "type": "WaitNode", "name": "人工确认窗口", "config": { "minMs": 15000, "maxMs": 15000 }, "next": ["containerCheck"] },
    {
      "id": "containerCheck",
      "type": "JavaScriptExecutionNode",
      "name": "基于容器的登录信号检查",
      "config": {
        "timeout": 20000,
        "script": "(function(){\n  const idx = window.__containerIndex || { containers: [] };\n  const byId = {};\n  for (const c of (idx.containers||[])) { byId[c.id] = c.selector || ''; }\n  // required 容器及其后备选择器（当未注入索引时使用）\n  const required = ['comment_icon_trigger','expand_button'];\n  const fallbacks = {\n    'comment_icon_trigger': '.woo-font.woo-font--comment.toolbar_commentIcon_3o7HB',\n    'expand_button': '.expand'\n  };\n  const negatives = ['.gn_login','.login_btn','[href*=\\"login\\"]','.unlogin'];\n  const presence = {};\n  const absences = {};\n  const isVisible = (el) => { if (!el) return false; const s = getComputedStyle(el); if (s.display==='none'||s.visibility==='hidden'||Number(s.opacity)===0) return false; const r = el.getBoundingClientRect(); return r.width>1 && r.height>1; };\n  for (const id of required) { const sel = byId[id] || fallbacks[id] || ''; let ok = false; if (sel) { const el = document.querySelector(sel); ok = isVisible(el); } presence[id] = { selector: sel||'', ok }; }\n  for (const sel of negatives) { const el = document.querySelector(sel); absences[sel] = { found: !!el, visible: isVisible(el) }; }\n  const requiredOk = Object.values(presence).filter(x=>x.selector).every(x=>x.ok);\n  const negativeOk = Object.values(absences).every(x=>!(x.found && x.visible));\n  return { success: true, presence, absences, requiredOk, negativeOk, isLikelyLoggedIn: requiredOk && negativeOk, ts: new Date().toISOString() };\n})"
      },
      "next": ["verifyLogin"]
    },
    {
      "id": "verifyLogin",
      "type": "LoginVerificationNode",
      "name": "登录验证（容器+Cookie双保险）",
      "config": {
        "loginSelectors": [".gn_name",".WB_name","[data-e2e=\"user-name\"]"],
        "cookieNames": ["SUB","SUE","SUP"],
        "maxRetries": 2,
        "retryDelay": 2000,
        "postLoginWaitMs": 1000,
        "autoSaveCookies": true,
        "hostFilter": "weibo.com",
        "cookieSavePath": "~/.webauto/cookies/weibo.com-latest.json"
      },
      "next": ["end"]
    },
    { "id": "end", "type": "EndNode", "name": "结束", "config": { "cleanup": false } }
  ]
}
