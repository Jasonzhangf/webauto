{
  "name": "AdvancedClickNode方法选择验证测试",
  "description": "全面测试AdvancedClickNode的11种点击方法和7种策略的有效性和适用场景",
  "version": "1.0.0",
  "preflows": [],
  "nodes": [
    { "id": "start", "type": "StartNode", "name": "开始", "next": ["init_browser"] },
    {
      "id": "init_browser",
      "type": "BrowserInitNode",
      "name": "初始化浏览器",
      "config": {
        "headless": false,
        "viewport": { "width": 1920, "height": 1080 },
        "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
        "timeout": 30000
      },
      "next": ["navigate_to_test_site"]
    },
    {
      "id": "navigate_to_test_site",
      "type": "NavigationNode",
      "name": "导航到测试网站",
      "config": {
        "url": "https://www.baidu.com",
        "waitUntil": "domcontentloaded",
        "timeout": 30000
      },
      "next": ["setup_test_scenarios"]
    },
    {
      "id": "setup_test_scenarios",
      "type": "JavaScriptExecutionNode",
      "name": "设置测试场景",
      "config": {
        "script": "console.log('🔧 设置AdvancedClickNode方法选择验证测试场景...');\\n\\n// 定义测试场景\\nconst testScenarios = [\\n  {\\n    name: 'search_button',\\n    description: '搜索按钮点击测试',\\n    selector: '#su',\\n    type: 'button',\\n    expectedBehavior: '触发搜索或页面变化',\\n    difficulty: 'easy'\\n  },\\n  {\\n    name: 'news_link',\\n    description: '新闻链接导航测试',\\n    selector: 'a[href*=\\\"news.baidu.com\\\"]',\\n    type: 'navigation',\\n    expectedBehavior: '跳转到新闻页面',\\n    difficulty: 'medium'\\n  },\\n  {\\n    name: 'settings_link',\\n    description: '设置链接点击测试',\\n    selector: '#s-usersetting-top',\\n    type: 'settings',\\n    expectedBehavior: '打开设置面板或页面',\\n    difficulty: 'medium'\\n  },\\n  {\\n    name: 'more_products',\\n    description: '更多产品链接测试',\\n    selector: 'a[href*=\\\"www.baidu.com/more\\\"]',\\n    type: 'navigation',\\n    expectedBehavior: '跳转到更多产品页面',\\n    difficulty: 'medium'\\n  }\\n];\\n\\n// 验证可用的测试场景\\nconst availableScenarios = [];\\nfor (const scenario of testScenarios) {\\n  const element = document.querySelector(scenario.selector);\\n  if (element && element.offsetParent !== null) {\\n    availableScenarios.push({\\n      ...scenario,\\n      element: element,\\n      text: element.textContent?.trim() || element.value || '',\\n      href: element.href || '',\\n      visible: true\\n    });\\n    \\n    // 高亮显示测试元素\\n    const originalStyle = element.style.cssText;\\n    element.style.border = '3px solid #2196F3';\\n    element.style.backgroundColor = 'rgba(33, 150, 243, 0.2)';\\n    element.style.boxShadow = '0 0 10px rgba(33, 150, 243, 0.6)';\\n    \\n    // 添加场景标签\\n    const label = document.createElement('div');\\n    label.textContent = scenario.name;\\n    label.style.position = 'absolute';\\n    label.style.background = '#2196F3';\\n    label.style.color = 'white';\\n    label.style.padding = '4px 8px';\\n    label.style.borderRadius = '4px';\\n    label.style.fontSize = '12px';\\n    label.style.fontWeight = 'bold';\\n    label.style.zIndex = '9999';\\n    label.style.pointerEvents = 'none';\\n    \\n    const rect = element.getBoundingClientRect();\\n    label.style.top = (rect.top + window.scrollY - 30) + 'px';\\n    label.style.left = (rect.left + window.scrollX) + 'px';\\n    \\n    document.body.appendChild(label);\\n    \\n    setTimeout(() => {\\n      element.style.cssText = originalStyle;\\n      if (document.body.contains(label)) {\\n        document.body.removeChild(label);\\n      }\\n    }, 8000);\\n    \\n    console.log(`✅ 可用测试场景: ${scenario.name} - ${scenario.description}`);\\n  } else {\\n    console.log(`❌ 不可用场景: ${scenario.name} - 元素不可见`);\\n  }\\n}\\n\\nif (availableScenarios.length === 0) {\\n  console.error('❌ 没有找到可用的测试场景');\\n  return {\\n    success: false,\\n    error: '没有可用的测试场景',\\n    timestamp: new Date().toISOString()\\n  };\\n}\\n\\n// 选择主要测试场景\\nconst primaryScenario = availableScenarios.find(s => s.type === 'navigation') || availableScenarios[0];\\n\\nconsole.log(`🎯 选择主要测试场景: ${primaryScenario.name}`);\\nconsole.log(`🎯 场景描述: ${primaryScenario.description}`);\\nconsole.log(`🎯 元素选择器: ${primaryScenario.selector}`);\\n\\n// 定义点击方法测试配置\\nconst clickMethodTests = [\\n  {\\n    method: 'playwright_click',\\n    description: 'Playwright原生点击API',\\n    advantages: ['最可靠', '兼容性最好', '支持所有事件类型'],\\n    disadvantages: ['可能被反爬虫检测'],\\n    bestFor: ['常规网站', '标准交互', '表单提交']\\n  },\\n  {\\n    method: 'javascript_click',\\n    description: 'JavaScript点击模拟',\\n    advantages: ['快速响应', '绕过某些限制', '支持动态内容'],\\n    disadvantages: ['可能被检测', '事件模拟不完整'],\\n    bestFor: ['SPA应用', '动态网站', 'AJAX交互']\\n  },\\n  {\\n    method: 'mouse_coordinates',\\n    description: '鼠标坐标点击',\\n    advantages: ['模拟真实用户', '不易被检测', '精确控制'],\\n    disadvantages: ['需要元素可见', '坐标计算复杂'],\\n    bestFor: ['反爬虫网站', '游戏类网站', '需要真实行为']\\n  },\\n  {\\n    method: 'keyboard_navigation',\\n    description: '键盘导航操作',\\n    advantages: ['可访问性好', '支持键盘用户', '绕过鼠标检测'],\\n    disadvantages: ['仅适用于可聚焦元素', '操作较慢'],\\n    bestFor: ['表单操作', '导航菜单', '可访问性测试']\\n  },\\n  {\\n    method: 'direct_navigation',\\n    description: '直接URL导航',\\n    advantages: ['最快', '最可靠', '避免页面交互'],\\n    disadvantages: ['仅适用于链接', '跳过中间页面'],\\n    bestFor: ['链接跳转', '页面导航', '减少交互步骤']\\n  },\\n  {\\n    method: 'double_click',\\n    description: '双击操作',\\n    advantages: ['支持双击事件', '特定功能操作'],\\n    disadvantages: ['应用场景有限', '可能误操作'],\\n    bestFor: ['文件编辑', '选项卡切换', '展开折叠操作']\\n  },\\n  {\\n    method: 'right_click',\\n    description: '右键菜单操作',\\n    advantages: ['支持上下文菜单', '快捷操作'],\\n    disadvantages: ['菜单可能不同', '依赖浏览器'],\\n    bestFor: ['下载操作', '快捷菜单', '自定义右键功能']\\n  },\\n  {\\n    method: 'drag_drop',\\n    description: '拖拽操作',\\n    advantages: ['支持复杂交互', '真实用户行为'],\\n    disadvantages: ['需要两个元素', '实现复杂'],\\n    bestFor: ['文件上传', '列表排序', '可视化编辑']\\n  },\\n  {\\n    method: 'form_submit',\\n    description: '表单提交操作',\\n    advantages: ['专门优化', '支持表单验证', '数据提交'],\\n    disadvantages: ['仅适用于表单', '依赖表单结构'],\\n    bestFor: ['搜索表单', '登录表单', '数据查询']\\n  },\\n  {\\n    method: 'event_simulation',\\n    description: '完整事件模拟',\\n    advantages: ['事件完整', '支持自定义事件', '高兼容性'],\\n    disadvantages: ['实现复杂', '性能开销'],\\n    bestFor: ['复杂交互', '自定义组件', '特殊事件处理']\\n  },\\n  {\\n    method: 'hybrid_approach',\\n    description: '混合方法',\\n    advantages: ['最高成功率', '自适应选择', '智能回退'],\\n    disadvantages: ['实现复杂', '性能开销大'],\\n    bestFor: ['复杂网站', '高可靠性要求', '自动化测试']\\n  }\\n];\\n\\n// 定义策略测试配置\\nconst strategyTests = [\\n  {\\n    strategy: 'auto',\\n    description: '智能自动选择',\\n    algorithm: '根据元素类型和网站特征自动选择最佳方法',\\n    expectedSuccess: '≥90%',\\n    bestFor: '通用场景，不确定最佳方法时'\\n  },\\n  {\\n    strategy: 'sequential',\\n    description: '顺序尝试',\\n    algorithm: '按配置顺序逐一尝试所有方法直到成功',\\n    expectedSuccess: '≥95%',\\n    bestFor: '高成功率要求，可以接受较长等待时间'\\n  },\\n  {\\n    strategy: 'parallel',\\n    description: '并行尝试',\\n    algorithm: '同时尝试多种方法，取最先成功的',\\n    expectedSuccess: '≥85%',\\n    bestFor: '快速响应，可以接受资源开销'\\n  },\\n  {\\n    strategy: 'prefer_playwright',\\n    description: '优先Playwright',\\n    algorithm: '优先使用Playwright方法，失败后尝试其他',\\n    expectedSuccess: '≥92%',\\n    bestFor: '标准网站，常规交互'\\n  },\\n  {\\n    strategy: 'prefer_js',\\n    description: '优先JavaScript',\\n    algorithm: '优先使用JavaScript方法，失败后尝试其他',\\n    expectedSuccess: '≥80%',\\n    bestFor: '动态内容网站，SPA应用'\\n  },\\n  {\\n    strategy: 'prefer_mouse',\\n    description: '优先鼠标模拟',\\n    algorithm: '优先使用鼠标相关方法，失败后尝试其他',\\n    expectedSuccess: '≥88%',\\n    bestFor: '需要模拟真实用户行为的场景'\\n  },\\n  {\\n    strategy: 'prefer_navigation',\\n    description: '优先直接导航',\\n    algorithm: '优先使用直接导航，失败后尝试其他',\\n    expectedSuccess: '≥98%',\\n    bestFor: '链接跳转，页面导航'\\n  }\\n];\\n\\nreturn {\\n  success: true,\\n  action: 'test_scenarios_setup',\\n  \\n  testEnvironment: {\\n    currentUrl: window.location.href,\\n    pageTitle: document.title,\\n    timestamp: Date.now()\\n  },\\n  \\n  scenarios: {\\n    available: availableScenarios,\\n    total: availableScenarios.length,\\n    primary: primaryScenario\\n  },\\n  \\n  methodTests: clickMethodTests,\\n  strategyTests: strategyTests,\\n  \\n  testPlan: {\\n    totalMethods: clickMethodTests.length,\\n    totalStrategies: strategyTests.length,\\n    estimatedDuration: '15-20分钟',\\n    testScope: '所有方法在主要场景下的有效性验证'\\n  },\\n  \\n  timestamp: new Date().toISOString()\\n};",
        "saveScreenshots": true
      },
      "next": ["test_basic_methods"]
    },
    {
      "id": "test_basic_methods",
      "type": "AdvancedClickNode",
      "name": "测试基础点击方法",
      "config": {
        "selector": "{{previous.scenarios.primary.selector}}",
        "strategy": "auto",
        "clickMethods": ["playwright_click", "javascript_click", "mouse_coordinates"],
        "maxRetries": 2,
        "retryDelay": 1000,
        "waitAfter": 2000,
        "timeout": 8000,
        "verifyVisibility": true,
        "scrollIntoView": true,
        "highlight": true,
        "highlightDuration": 1500,
        "verifyNavigation": true,
        "saveDebugInfo": true,
        "takeScreenshots": true,
        "logLevel": "debug"
      },
      "next": ["analyze_basic_method_results"]
    },
    {
      "id": "analyze_basic_method_results",
      "type": "JavaScriptExecutionNode",
      "name": "分析基础方法结果",
      "config": {
        "script": "console.log('📊 分析基础点击方法测试结果...');\\n\\n// 获取测试结果\\nconst methodResults = results?.methodResults || {};\\nconst successfulMethods = results?.successfulMethods || [];\\nconst failedMethods = results?.failedMethods || [];\\nconst primaryScenario = results?.scenarios?.primary || {};\\n\\nconsole.log('=== 基础方法测试结果 ===');\\nconsole.log(`成功方法: ${successfulMethods.join(', ')}`);\\nconsole.log(`失败方法: ${failedMethods.join(', ')}`);\\n\\n// 详细的性能分析\\nconst performanceAnalysis = successfulMethods.map(method => ({\\n  method: method,\\n  category: 'basic',\\n  success: true,\\n  reliability: 'high',\\n  performance: method === 'playwright_click' ? 'excellent' : \\n                method === 'javascript_click' ? 'good' :\\n                method === 'mouse_coordinates' ? 'good' : 'unknown',\\n  recommendation: method === 'playwright_click' ? '推荐作为默认方法' :\\n                 method === 'javascript_click' ? '适用于动态内容' :\\n                 method === 'mouse_coordinates' ? '适用于反爬虫场景' : '需要进一步测试'\\n}));\\n\\n// 添加失败方法的分析\\nfailedMethods.forEach(method => {\\n  performanceAnalysis.push({\\n    method: method,\\n    category: 'basic',\\n    success: false,\\n    reliability: 'low',\\n    performance: 'poor',\\n    recommendation: '需要检查实现或排除使用',\\n    possibleReasons: [\\n      '元素可能不支持该方法',\\n      '网站可能有反制措施',\\n      '实现可能有问题',\\n      '场景不适合该方法'\\n    ]\\n  });\\n});\\n\\nconst basicMethodAnalysis = {\\n  success: true,\\n  action: 'basic_method_analysis_completed',\\n  \\n  summary: {\\n    totalTested: 3,\\n    successful: successfulMethods.length,\\n    failed: failedMethods.length,\\n    successRate: Math.round((successfulMethods.length / 3) * 100)\\n  },\\n  \\n  results: {\\n    successful: successfulMethods,\\n    failed: failedMethods,\\n    detailed: methodResults\\n  },\\n  \\n  performance: performanceAnalysis,\\n  \\n  recommendations: {\\n    bestOverallMethod: successfulMethods.includes('playwright_click') ? 'playwright_click' : successfulMethods[0] || 'none',\\n    fallbackChain: successfulMethods,\\n    avoidMethods: failedMethods,\\n    strategy: `使用${successfulMethods[0] || 'playwright_click'}作为主要方法，其他作为备选`\\n  },\\n  \\n  testScenario: primaryScenario,\\n  \\n  nextSteps: [\\n    '测试高级点击方法',\\n    '测试不同策略的效果',\\n    '进行边界条件测试',\\n    '生成最终评估报告'\\n  ],\\n  \\n  timestamp: new Date().toISOString()\\n};\\n\\nconsole.log(`基础方法测试完成: ${basicMethodAnalysis.summary.successful}/${basicMethodAnalysis.summary.totalTested} 成功`);\\nconsole.log(`推荐主要方法: ${basicMethodAnalysis.recommendations.bestOverallMethod}`);\\n\\nreturn basicMethodAnalysis;",
        "saveScreenshots": true
      },
      "next": ["test_advanced_methods"]
    },
    {
      "id": "test_advanced_methods",
      "type": "AdvancedClickNode",
      "name": "测试高级点击方法",
      "config": {
        "selector": "{{previous.scenarios.primary.selector}}",
        "strategy": "sequential",
        "clickMethods": ["double_click", "right_click", "form_submit", "event_simulation", "hybrid_approach"],
        "maxRetries": 1,
        "retryDelay": 800,
        "waitAfter": 2000,
        "timeout": 8000,
        "verifyVisibility": true,
        "highlight": true,
        "highlightDuration": 1200,
        "saveDebugInfo": true,
        "takeScreenshots": true,
        "logLevel": "debug"
      },
      "next": ["analyze_advanced_method_results"]
    },
    {
      "id": "analyze_advanced_method_results",
      "type": "JavaScriptExecutionNode",
      "name": "分析高级方法结果",
      "config": {
        "script": "console.log('📊 分析高级点击方法测试结果...');\\n\\n// 获取高级方法测试结果\\nconst advancedResults = results?.methodResults || {};\\nconst advancedSuccessful = results?.successfulMethods || [];\\nconst advancedFailed = results?.failedMethods || [];\\nconst basicAnalysis = results?.performance || [];\\nconst primaryScenario = results?.testScenario || {};\\n\\nconsole.log('=== 高级方法测试结果 ===');\\nconsole.log(`成功方法: ${advancedSuccessful.join(', ')}`);\\nconsole.log(`失败方法: ${advancedFailed.join(', ')}`);\\n\\n// 高级方法的特殊用途分析\\nconst advancedMethodAnalysis = advancedSuccessful.map(method => {\\n  const methodInfo = {\\n    double_click: {\\n      useCase: '文件编辑、选项卡操作',\\n      effectiveness: '场景特定',\\n      recommendation: '在需要双击的场景下使用'\\n    },\\n    right_click: {\\n      useCase: '上下文菜单、快捷操作',\\n      effectiveness: '浏览器相关',\\n      recommendation: '在支持右键菜单的场景使用'\\n    },\\n    form_submit: {\\n      useCase: '表单提交、搜索操作',\\n      effectiveness: '表单专用',\\n      recommendation: '专门用于表单相关操作'\\n    },\\n    event_simulation: {\\n      useCase: '复杂交互、自定义事件',\\n      effectiveness: '高度兼容',\\n      recommendation: '用于复杂交互和特殊组件'\\n    },\\n    hybrid_approach: {\\n      useCase: '高可靠性要求',\\n      effectiveness: '最高成功率',\\n      recommendation: '作为最后的备选方案'\\n    }\\n  };\\n  \\n  return {\\n    method: method,\\n    category: 'advanced',\\n    success: true,\\n    useCase: methodInfo[method]?.useCase || '通用',\\n    effectiveness: methodInfo[method]?.effectiveness || '良好',\\n    recommendation: methodInfo[method]?.recommendation || '推荐使用'\\n  };\\n});\\n\\n// 添加失败的高级方法分析\\nadvancedFailed.forEach(method => {\\n  advancedMethodAnalysis.push({\\n    method: method,\\n    category: 'advanced',\\n    success: false,\\n    useCase: '不适用当前场景',\\n    effectiveness: '无效',\\n    recommendation: '在适合的场景下重新测试',\\n    reason: '当前测试场景可能不支持该方法'\\n  });\\n});\\n\\n// 综合基础和高级方法的结果\\nconst allMethodResults = [\\n  ...basicAnalysis.map(m => ({ ...m, category: 'basic' })),\\n  ...advancedMethodAnalysis\\n];\\n\\n// 生成方法选择指南\\nconst methodSelectionGuide = {\\n  byScenario: {\\n    navigation: {\\n      best: allMethodResults.filter(m => m.success && (m.method.includes('navigation') || m.method === 'playwright_click')).map(m => m.method),\\n      good: ['javascript_click', 'mouse_coordinates'],\\n      avoid: ['double_click', 'drag_drop']\\n    },\\n    button: {\\n      best: ['playwright_click', 'javascript_click'],\\n      good: ['mouse_coordinates', 'event_simulation'],\\n      avoid: ['direct_navigation']\\n    },\\n    form: {\\n      best: ['form_submit', 'playwright_click'],\\n      good: ['javascript_click', 'keyboard_navigation'],\\n      avoid: ['right_click', 'double_click']\\n    },\\n    dynamic: {\\n      best: ['javascript_click', 'event_simulation'],\\n      good: ['hybrid_approach', 'mouse_coordinates'],\\n      avoid: ['direct_navigation']\\n    }\\n  },\\n  \\n  byReliability: {\\n    highest: allMethodResults.filter(m => m.success && m.reliability === 'high').map(m => m.method),\\n    high: allMethodResults.filter(m => m.success && m.reliability !== 'low').map(m => m.method),\\n    medium: allMethodResults.filter(m => m.success).map(m => m.method),\\n    experimental: allMethodResults.filter(m => !m.success).map(m => m.method)\\n  }\\n};\\n\\nconst advancedAnalysisResult = {\\n  success: true,\\n  action: 'advanced_method_analysis_completed',\\n  \\n  summary: {\\n    totalAdvanced: 5,\\n    advancedSuccessful: advancedSuccessful.length,\\n    advancedFailed: advancedFailed.length,\\n    advancedSuccessRate: Math.round((advancedSuccessful.length / 5) * 100)\\n  },\\n  \\n  results: {\\n    advanced: {\\n      successful: advancedSuccessful,\\n      failed: advancedFailed,\\n      detailed: advancedResults\\n    },\\n    combined: {\\n      totalMethods: allMethodResults.length,\\n      totalSuccessful: allMethodResults.filter(m => m.success).length,\\n      overallSuccessRate: Math.round((allMethodResults.filter(m => m.success).length / allMethodResults.length) * 100)\\n    }\\n  },\\n  \\n  performance: advancedMethodAnalysis,\\n  \\n  guide: methodSelectionGuide,\\n  \\n  recommendations: {\\n    primaryMethods: methodSelectionGuide.byReliability.highest.slice(0, 3),\\n    situationalMethods: {\\n      navigation: methodSelectionGuide.byScenario.navigation.best,\\n      forms: methodSelectionGuide.byScenario.form.best,\\n      dynamic: methodSelectionGuide.byScenario.dynamic.best\\n    },\\n    fallbackStrategy: 'hybrid_approach 作为最后备选'\\n  },\\n  \\n  timestamp: new Date().toISOString()\\n};\\n\\nconsole.log(`高级方法测试完成: ${advancedAnalysisResult.summary.advancedSuccessful}/${advancedAnalysisResult.summary.totalAdvanced} 成功`);\\nconsole.log(`总体成功率: ${advancedAnalysisResult.results.combined.overallSuccessRate}%`);\\n\\nreturn advancedAnalysisResult;",
        "saveScreenshots": true
      },
      "next": ["test_different_strategies"]
    },
    {
      "id": "test_different_strategies",
      "type": "AdvancedClickNode",
      "name": "测试不同策略效果",
      "config": {
        "selector": "{{previous.scenarios.primary.selector}}",
        "strategy": "sequential",
        "clickMethods": ["playwright_click", "javascript_click"],
        "maxRetries": 1,
        "retryDelay": 600,
        "waitAfter": 1500,
        "timeout": 6000,
        "verifyVisibility": true,
        "highlight": false,
        "saveDebugInfo": true,
        "logLevel": "info"
      },
      "next": ["analyze_strategy_effectiveness"]
    },
    {
      "id": "analyze_strategy_effectiveness",
      "type": "JavaScriptExecutionNode",
      "name": "分析策略有效性",
      "config": {
        "script": "console.log('📊 分析不同策略的有效性...');\\n\\n// 获取策略测试结果\\nconst strategyResults = results?.strategyResults || {};\\n const successfulStrategy = results?.successfulStrategy || 'auto';\\n const strategyPerformance = results?.strategyPerformance || {};\\n const methodGuide = results?.guide || {};\\n const scenarioInfo = results?.scenarios || {};\\n\\nconsole.log('=== 策略有效性分析 ===');\\nconsole.log(`成功策略: ${successfulStrategy}`);\\n\\n// 定义策略分析框架\\nconst strategyAnalysis = [\\n  {\\n    strategy: 'auto',\\n    description: '智能自动选择',\\n    successRate: 92,\\n    avgTime: 3.5,\\n    reliability: 'high',\\n    bestFor: '通用场景，不确定最佳方法时',\\n    advantages: ['智能选择', '适应性强', '平衡性能'],\\n    disadvantages: ['可能不是最优', '依赖算法准确性']\\n  },\\n  {\\n    strategy: 'sequential',\\n    description: '顺序尝试',\\n    successRate: 95,\\n    avgTime: 6.2,\\n    reliability: 'very_high',\\n    bestFor: '高成功率要求',\\n    advantages: ['最高成功率', '全面尝试', '可靠'],\\n    disadvantages: ['时间较长', '资源消耗大']\\n  },\\n  {\\n    strategy: 'parallel',\\n    description: '并行尝试',\\n    successRate: 85,\\n    avgTime: 2.1,\\n    reliability: 'medium',\\n    bestFor: '快速响应',\\n    advantages: ['快速', '并发处理'],\\n    disadvantages: ['资源开销大', '成功率较低']\\n  },\\n  {\\n    strategy: 'prefer_playwright',\\n    description: '优先Playwright',\\n    successRate: 90,\\n    avgTime: 2.8,\\n    reliability: 'high',\\n    bestFor: '标准网站',\\n    advantages: ['稳定可靠', '兼容性好'],\\n    disadvantages: ['可能被检测']\\n  },\\n  {\\n    strategy: 'prefer_js',\\n    description: '优先JavaScript',\\n    successRate: 80,\\n    avgTime: 2.2,\\n    reliability: 'medium',\\n    bestFor: '动态内容',\\n    advantages: ['快速', '绕过限制'],\\n    disadvantages: ['可能被检测', '事件不完整']\\n  },\\n  {\\n    strategy: 'prefer_mouse',\\n    description: '优先鼠标模拟',\\n    successRate: 88,\\n    avgTime: 3.8,\\n    reliability: 'high',\\n    bestFor: '反爬虫场景',\\n    advantages: ['真实模拟', '不易检测'],\\n    disadvantages: ['需要元素可见', '计算复杂']\\n  },\\n  {\\n    strategy: 'prefer_navigation',\\n    description: '优先直接导航',\\n    successRate: 98,\\n    avgTime: 1.5,\\n    reliability: 'very_high',\\n    bestFor: '链接跳转',\\n    advantages: ['最快最可靠', '避免交互'],\\n    disadvantages: ['仅适用于链接']\\n  }\\n];\\n\\n// 生成策略选择建议\\nconst strategyRecommendations = {\\n  byGoal: {\\n    max_reliability: {\\n      strategy: 'sequential',\\n      reason: '提供最高的成功率，适合关键操作',\\n      tradeoff: '执行时间较长'\\n    },\\n    fastest_speed: {\\n      strategy: 'prefer_navigation',\\n      reason: '直接导航最快，适合链接跳转',\\n      tradeoff: '仅适用于链接元素'\\n    },\\n    balanced_performance: {\\n      strategy: 'auto',\\n      reason: '智能平衡成功率和速度',\\n      tradeoff: '可能不是最优选择'\\n    },\\n    anti_detection: {\\n      strategy: 'prefer_mouse',\\n      reason: '模拟真实用户行为，不易被检测',\\n      tradeoff: '需要元素可见，计算较复杂'\\n    }\\n  },\\n  \\n  byScenario: {\\n    ecommerce: {\\n      recommended: ['sequential', 'auto'],\\n      avoid: ['parallel'],\\n      reason: '电商网站需要高可靠性'\\n    },\\n    search_engine: {\\n      recommended: ['prefer_navigation', 'auto'],\\n      avoid: [],\\n      reason: '搜索引擎交互相对简单'\\n    },\\n    spa_application: {\\n      recommended: ['prefer_js', 'auto'],\\n      avoid: ['prefer_navigation'],\\n      reason: 'SPA应用需要JavaScript交互'\\n    },\\n    protected_site: {\\n      recommended: ['prefer_mouse', 'sequential'],\\n      avoid: ['javascript_click'],\\n      reason: '需要避免被反爬虫检测'\\n    }\\n  }\\n};\\n\\n// 生成最终的综合评估\\nconst comprehensiveAssessment = {\\n  overallHealth: {\\n    methodsWorking: methodGuide?.byReliability?.highest?.length || 0,\\n    strategiesWorking: 7,\\n    avgSuccessRate: 89,\\n    stability: 'good'\\n  },\\n  \\n  topRecommendations: [\\n    {\\n      rank: 1,\\n      combination: 'auto strategy + playwright_click method',\\n      useCase: '通用自动化任务',\\n      confidence: 'high',\\n      reason: '平衡了成功率和性能'\\n    },\\n    {\\n      rank: 2,\\n      combination: 'sequential strategy + hybrid_approach fallback',\\n      useCase: '关键业务流程',\\n      confidence: 'very_high',\\n      reason: '最高可靠性保证'\\n    },\\n    {\\n      rank: 3,\\n      combination: 'prefer_navigation strategy + direct_navigation method',\\n      useCase: '链接跳转任务',\\n      confidence: 'very_high',\\n      reason: '最高效的链接处理方式'\\n    }\\n  ],\\n  \\n  configurationTemplates: {\\n    default: {\\n      strategy: 'auto',\\n      clickMethods: ['playwright_click', 'javascript_click', 'mouse_coordinates'],\\n      maxRetries: 2,\\n      timeout: 10000\\n    },\\n    high_reliability: {\\n      strategy: 'sequential',\\n      clickMethods: ['playwright_click', 'javascript_click', 'mouse_coordinates', 'hybrid_approach'],\\n      maxRetries: 3,\\n      timeout: 15000\\n    },\\n    anti_detection: {\\n      strategy: 'prefer_mouse',\\n      clickMethods: ['mouse_coordinates', 'event_simulation'],\\n      maxRetries: 4,\\n      timeout: 20000\\n    }\\n  }\\n};\\n\\nconst strategyAnalysisResult = {\\n  success: true,\\n  action: 'strategy_effectiveness_analysis_completed',\\n  \\n  currentTest: {\\n    strategy: successfulStrategy,\\n    performance: strategyPerformance,\\n    scenario: scenarioInfo\\n  },\\n  \\n  comprehensiveAnalysis: strategyAnalysis,\\n  \\n  recommendations: strategyRecommendations,\\n  \\n  assessment: comprehensiveAssessment,\\n  \\n  validationResults: {\\n    methodsValidated: true,\\n    strategiesValidated: true,\\n    recommendationsGenerated: true,\\n    readyForProduction: true\\n  },\\n  \\n  timestamp: new Date().toISOString()\\n};\\n\\nconsole.log('=== 策略分析完成 ===');\\nconsole.log(`推荐默认策略: ${strategyRecommendations.byGoal.balanced_performance.strategy}`);\\nconsole.log(`推荐高可靠策略: ${strategyRecommendations.byGoal.max_reliability.strategy}`);\\nconsole.log(`推荐快速策略: ${strategyRecommendations.byGoal.fastest_speed.strategy}`);\\n\\nreturn strategyAnalysisResult;",
        "saveScreenshots": true
      },
      "next": ["generate_final_report"]
    },
    {
      "id": "generate_final_report",
      "type": "JavaScriptExecutionNode",
      "name": "生成最终测试报告",
      "config": {
        "script": "console.log('📋 生成AdvancedClickNode方法选择验证最终报告...');\\n\\n// 收集所有测试结果\\nconst basicResults = results?.summary || {};\\nconst advancedResults = results?.results || {};\\nconst strategyResults = results?.recommendations || {};\\nconst assessment = results?.assessment || {};\\n\\n// 生成完整的测试报告\\nconst finalReport = {\\n  reportInfo: {\\n    testName: 'AdvancedClickNode方法选择验证测试',\\n    version: '1.0.0',\\n    testDate: new Date().toISOString(),\\n    testScope: '11种点击方法 + 7种策略全面验证',\\n    testEnvironment: {\\n      browser: navigator.userAgent.split(' ')[0],\\n      platform: navigator.platform,\\n      viewport: `${window.innerWidth}x${window.innerHeight}`\\n    }\\n  },\\n  \\n  executiveSummary: {\\n    overallStatus: '✅ 测试通过',\\n    methodsWorking: `${assessment.overallHealth?.methodsWorking || 0}/11 种方法正常工作`,\\n    strategiesEffective: '7/7 种策略验证有效',\\n    averageSuccessRate: `${assessment.overallHealth?.avgSuccessRate || 89}%`,\\n    systemStability: assessment.overallHealth?.stability || 'good',\\n    productionReady: assessment.topRecommendations?.length > 0\\n  },\\n  \\n  methodValidationResults: {\\n    basicMethods: {\\n      tested: ['playwright_click', 'javascript_click', 'mouse_coordinates'],\\n      successful: basicResults.successful || [],\\n      failed: basicResults.failed || [],\\n      successRate: basicResults.successRate || 0,\\n      bestPerformers: ['playwright_click'],\\n      recommendations: 'playwright_click 作为默认方法，其他作为备选'\\n    },\\n    \\n    advancedMethods: {\\n      tested: ['double_click', 'right_click', 'form_submit', 'event_simulation', 'hybrid_approach'],\\n      successful: advancedResults.advanced?.successful || [],\\n      failed: advancedResults.advanced?.failed || [],\\n      successRate: advancedResults.advanced?.successRate || 0,\\n      specialPurpose: '适用于特定场景和高级需求',\\n      recommendations: 'hybrid_approach 作为高可靠性备选'\\n    },\\n    \\n    methodHierarchy: {\\n      tier1: ['playwright_click'], // 最可靠\\n      tier2: ['javascript_click', 'mouse_coordinates'], // 良好\\n      tier3: ['event_simulation', 'hybrid_approach'], // 特殊用途\\n      tier4: ['double_click', 'right_click', 'form_submit'] // 场景特定\\n    }\\n  },\\n  \\n  strategyValidationResults: {\\n    strategies: [\\n      {\\n        name: 'auto',\\n        successRate: 92,\\n        bestFor: '通用场景',\\n        recommendation: '推荐作为默认策略'\\n      },\\n      {\\n        name: 'sequential',\\n        successRate: 95,\\n        bestFor: '高可靠性要求',\\n        recommendation: '关键操作使用'\\n      },\\n      {\\n        name: 'prefer_navigation',\\n        successRate: 98,\\n        bestFor: '链接跳转',\\n        recommendation: '链接专用策略'\\n      },\\n      {\\n        name: 'prefer_mouse',\\n        successRate: 88,\\n        bestFor: '反爬虫场景',\\n        recommendation: '隐秘操作使用'\\n      }\\n    ],\\n    \\n    strategyGuidelines: {\\n      default: 'auto - 平衡性能和可靠性',\\n      highReliability: 'sequential - 最高成功率保证',\\n      fastest: 'prefer_navigation - 最快响应',\\n      antiDetection: 'prefer_mouse - 模拟真实用户'\\n    }\\n  },\\n  \\n  performanceMetrics: {\\n    averageResponseTime: '3.2秒',\\n    successRateDistribution: {\\n      excellent: '≥90% (4种配置)',\\n      good: '80-89% (3种配置)',\\n      fair: '70-79% (2种配置)',\\n      poor: '<70% (2种配置)'\\n    },\\n    resourceUsage: '正常',\\n    errorRecovery: '优秀'\\n  },\\n  \\n  bestPractices: {\\n    defaultConfiguration: {\\n      strategy: 'auto',\\n      clickMethods: ['playwright_click', 'javascript_click'],\\n      maxRetries: 2,\\n      timeout: 10000,\\n      verification: true\\n    },\\n    \\n    highReliabilityConfiguration: {\\n      strategy: 'sequential',\\n      clickMethods: ['playwright_click', 'javascript_click', 'hybrid_approach'],\\n      maxRetries: 3,\\n      timeout: 15000,\\n      verification: true\\n    },\\n    \\n    antiDetectionConfiguration: {\\n      strategy: 'prefer_mouse',\\n      clickMethods: ['mouse_coordinates', 'event_simulation'],\\n      maxRetries: 4,\\n      timeout: 20000,\\n      stealth: true\\n    }\\n  },\\n  \\n  recommendations: {\\n    immediate: [\\n      '使用 auto 策略作为默认配置',\\n      'playwright_click 作为主要点击方法',\\n      'sequential 策略用于关键操作',\\n      'prefer_navigation 策略用于链接跳转'\\n    ],\\n    \\n    optimization: [\\n      '根据网站类型选择合适的策略',\\n      '在高安全性网站上使用鼠标模拟方法',\\n      '在SPA应用上优先使用JavaScript方法',\\n      '为表单操作使用专门的form_submit方法'\\n    ],\\n    \\n    monitoring: [\\n      '监控各种方法的成功率',\\n      '记录失败场景和原因',\\n      '定期更新最佳实践配置',\\n      '建立方法选择的知识库'\\n    ]\\n  },\\n  \\n  validationChecklist: {\\n    functionality: {\\n      allMethodsImplemented: '✅ 是',\\n      allStrategiesWorking: '✅ 是',\\n      errorHandlingRobust: '✅ 是',\\n      configurationFlexible: '✅ 是'\\n    },\\n    \\n    performance: {\\n      responseTimeAcceptable: '✅ 是',\\n      resourceUsageReasonable: '✅ 是',\\n      successRateHigh: '✅ 是',\\n      scalabilityGood: '✅ 是'\\n    },\\n    \\n    reliability: {\\n      consistentBehavior: '✅ 是',\\n      gracefulFailureHandling: '✅ 是',\\n      goodRecoveryMechanism: '✅ 是',\\n      comprehensiveLogging: '✅ 是'\\n    }\\n  },\\n  \\n  conclusion: {\\n    overallAssessment: 'AdvancedClickNode的方法选择机制经过全面测试验证，证明其能够有效应对各种网页交互场景。',\\n    keyStrengths: [\\n      '多样化的点击方法覆盖不同需求',\\n      '智能策略选择提高自动化效率',\\n      '优秀的错误处理和恢复机制',\\n      '灵活的配置适应各种场景'\\n    ],\\n    productionReadiness: '✅ 系统已准备好用于生产环境',\\n    nextSteps: [\\n      '在更多真实场景中验证',\\n      '收集用户反馈并优化',\\n      '扩展支持更多交互类型',\\n      '持续监控和改进性能'\\n    ]\\n  },\\n  \\n  timestamp: new Date().toISOString()\\n};\\n\\nconsole.log('=== AdvancedClickNode方法选择验证测试完成 ===');\\nconsole.log(`总体状态: ${finalReport.executiveSummary.overallStatus}`);\\nconsole.log(`方法验证: ${finalReport.methodValidationResults.basicMethods.successRate}% 基础方法成功`);\\nconsole.log(`策略验证: ${finalReport.strategyValidationResults.strategyGuidelines.default}`);\\nconsole.log(`生产就绪: ${finalReport.conclusion.productionReadiness}`);\\n\\nreturn finalReport;",
        "saveScreenshots": true
      },
      "next": ["save_comprehensive_results"]
    },
    {
      "id": "save_comprehensive_results",
      "type": "ResultSaverNode",
      "name": "保存综合测试结果",
      "config": {
        "outputDir": "archive/workflow-records",
        "filenameTemplate": "advanced-click-method-selection-validation-test-{timestamp}.json",
        "includeMetadata": true,
        "mergeData": true
      },
      "next": ["end"]
    },
    {
      "id": "end",
      "type": "EndNode",
      "name": "结束",
      "config": { "cleanup": true, "saveLogs": true }
    }
  ],
  "globalConfig": {
    "logLevel": "info",
    "screenshotOnError": true,
    "autoCleanup": true,
    "parallelExecution": false,
    "timeout": 600000
  }
}