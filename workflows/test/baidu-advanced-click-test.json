{
  "name": "百度首页高级点击测试",
  "description": "使用AdvancedClickNode在百度首页测试多种点击方法",
  "version": "1.0.0",
  "preflows": [],
  "nodes": [
    { "id": "start", "type": "StartNode", "name": "开始", "next": ["init_browser"] },
    {
      "id": "init_browser",
      "type": "BrowserInitNode",
      "name": "初始化浏览器",
      "config": {
        "headless": false,
        "viewport": { "width": 1920, "height": 1080 },
        "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
        "timeout": 30000
      },
      "next": ["navigate_baidu"]
    },
    {
      "id": "navigate_baidu",
      "type": "NavigationNode",
      "name": "导航到百度首页",
      "config": {
        "url": "https://www.baidu.com",
        "waitUntil": "domcontentloaded",
        "timeout": 30000
      },
      "next": ["wait_baidu"]
    },
    {
      "id": "wait_baidu",
      "type": "WaitNode",
      "name": "等待百度首页加载",
      "config": { "minMs": 2000, "maxMs": 3000 },
      "next": ["find_search_elements"]
    },
    {
      "id": "find_search_elements",
      "type": "JavaScriptExecutionNode",
      "name": "查找搜索框和搜索按钮",
      "config": {
        "script": "console.log('🔍 开始查找百度搜索元素...');\n\n// 查找搜索框\nconst searchBox = document.querySelector('#kw');\nconst searchButton = document.querySelector('#su');\n\n// 查找其他可点击的元素\nconst newsLink = document.querySelector('a[href*=\"news.baidu.com\"]');\nconst mapLink = document.querySelector('a[href*=\"map.baidu.com\"]');\nconst moreLink = document.querySelector('a[href*=\"www.baidu.com/more\"]');\nconst loginButton = document.querySelector('a[name*=\"login\"]');\nconst settingsButton = document.querySelector('#s-usersetting-top');\n\nconst elements = {\n  searchBox: {\n    selector: '#kw',\n    element: searchBox,\n    text: searchBox ? searchBox.placeholder || '搜索框' : null,\n    visible: searchBox ? searchBox.offsetParent !== null : false\n  },\n  searchButton: {\n    selector: '#su',\n    element: searchButton,\n    text: searchButton ? searchButton.value || '搜索按钮' : null,\n    visible: searchButton ? searchButton.offsetParent !== null : false\n  },\n  newsLink: {\n    selector: 'a[href*=\"news.baidu.com\"]',\n    element: newsLink,\n    text: newsLink ? newsLink.textContent.trim() : null,\n    visible: newsLink ? newsLink.offsetParent !== null : false\n  },\n  mapLink: {\n    selector: 'a[href*=\"map.baidu.com\"]',\n    element: mapLink,\n    text: mapLink ? mapLink.textContent.trim() : null,\n    visible: mapLink ? mapLink.offsetParent !== null : false\n  },\n  moreLink: {\n    selector: 'a[href*=\"www.baidu.com/more\"]',\n    element: moreLink,\n    text: moreLink ? moreLink.textContent.trim() : null,\n    visible: moreLink ? moreLink.offsetParent !== null : false\n  },\n  loginButton: {\n    selector: 'a[name*=\"login\"]',\n    element: loginButton,\n    text: loginButton ? loginButton.textContent.trim() : null,\n    visible: loginButton ? loginButton.offsetParent !== null : false\n  },\n  settingsButton: {\n    selector: '#s-usersetting-top',\n    element: settingsButton,\n    text: settingsButton ? settingsButton.textContent.trim() : null,\n    visible: settingsButton ? settingsButton.offsetParent !== null : false\n  }\n};\n\n// 找到第一个可见的元素作为测试目标\nlet targetElement = null;\nlet targetName = null;\n\nfor (const [name, info] of Object.entries(elements)) {\n  if (info.visible && info.element) {\n    targetElement = info;\n    targetName = name;\n    console.log(`✅ 找到目标元素: ${name} (${info.selector})`);\n    console.log(`元素文本: ${info.text}`);\n    \n    // 高亮显示找到的元素\n    const originalStyle = info.element.style.cssText;\n    info.element.style.border = '3px solid red';\n    info.element.style.backgroundColor = 'yellow';\n    info.element.style.boxShadow = '0 0 10px rgba(255,0,0,0.5)';\n    \n    setTimeout(() => {\n      info.element.style.cssText = originalStyle;\n    }, 2000);\n    \n    break;\n  }\n}\n\nif (!targetElement) {\n  console.error('❌ 未找到任何可见的元素');\n  return {\n    success: false,\n    error: '未找到任何可见的可点击元素',\n    elements: elements,\n    timestamp: new Date().toISOString()\n  };\n}\n\nconsole.log('🎯 成功找到测试目标');\n\nreturn {\n  success: true,\n  action: 'elements_found',\n  targetElement: targetElement,\n  targetName: targetName,\n  selector: targetElement.selector,\n  allElements: elements,\n  pageUrl: window.location.href,\n  pageTitle: document.title,\n  timestamp: new Date().toISOString()\n};",
        "saveScreenshots": true
      },
      "next": ["test_click_methods"]
    },
    {
      "id": "test_click_methods",
      "type": "AdvancedClickNode",
      "name": "测试多种点击方法",
      "config": {
        "selector": "{{previous.selector}}",
        "strategy": "auto",
        "clickMethods": [
          "playwright_click",
          "javascript_click",
          "mouse_coordinates",
          "double_click",
          "right_click"
        ],
        "maxRetries": 1,
        "retryDelay": 500,
        "waitAfter": 2000,
        "timeout": 8000,
        "verifyVisibility": true,
        "scrollIntoView": true,
        "highlight": true,
        "highlightDuration": 1500,
        "verifyNavigation": false,
        "fallbackToNavigation": false,
        "saveDebugInfo": true,
        "takeScreenshots": true,
        "logLevel": "info",
        "testMode": true
      },
      "next": ["verify_click_result"]
    },
    {
      "id": "verify_click_result",
      "type": "JavaScriptExecutionNode",
      "name": "验证点击结果",
      "config": {
        "script": "console.log('🔍 验证点击结果...');\n\n// 从上一个节点的结果中获取选择器信息\nconst targetSelector = results?.selector || 'a[href*=\"news.baidu.com\"]';\nconst originalPageUrl = results?.pageUrl || 'https://www.baidu.com/';\n\nconst currentUrl = window.location.href;\nconst currentTitle = document.title;\n\n// 检查页面是否有变化\nconst urlChanged = currentUrl !== originalPageUrl;\n\n// 检查是否有弹窗或新元素出现\nconst modalPresent = !!document.querySelector('.modal, .popup, .dialog, [role*=\"dialog\"]');\n\n// 检查目标元素是否仍然可见\nconst targetElement = document.querySelector(targetSelector);\nconst targetStillVisible = targetElement ? targetElement.offsetParent !== null : false;\n\nconsole.log(`当前URL: ${currentUrl}`);\nconsole.log(`原始URL: ${originalPageUrl}`);\nconsole.log(`URL是否改变: ${urlChanged}`);\nconsole.log(`是否有弹窗: ${modalPresent}`);\nconsole.log(`目标元素仍可见: ${targetStillVisible}`);\nconsole.log(`目标选择器: ${targetSelector}`);\n\n// 评估点击效果\nlet clickEffect = 'unknown';\nif (urlChanged) {\n  clickEffect = 'navigation';\n} else if (modalPresent) {\n  clickEffect = 'modal_opened';\n} else if (!targetStillVisible) {\n  clickEffect = 'element_hidden';\n} else {\n  clickEffect = 'clicked_no_effect';\n}\n\nconst verificationResult = {\n  success: true,\n  action: 'click_verified',\n  clickEffect: clickEffect,\n  \n  currentUrl: currentUrl,\n  currentTitle: currentTitle,\n  originalUrl: originalPageUrl,\n  \n  urlChanged: urlChanged,\n  modalPresent: modalPresent,\n  targetStillVisible: targetStillVisible,\n  targetSelector: targetSelector,\n  \n  verificationDetails: {\n    elementCount: document.querySelectorAll('*').length,\n    visibleElements: document.querySelectorAll(':not([style*=\"display: none\"])').length,\n    clickableElements: document.querySelectorAll('a, button, input[type=\"button\"], input[type=\"submit\"]').length\n  },\n  \n  timestamp: new Date().toISOString()\n};\n\nconsole.log(`点击效果: ${clickEffect}`);\nconsole.log('验证完成:', verificationResult);\n\nreturn verificationResult;",
        "saveScreenshots": true
      },
      "next": ["save_results"]
    },
    {
      "id": "save_results",
      "type": "ResultSaverNode",
      "name": "保存测试结果",
      "config": {
        "outputDir": "workflows/records",
        "filenameTemplate": "baidu-advanced-click-test-{timestamp}.json",
        "includeMetadata": true,
        "mergeData": true
      },
      "next": ["end"]
    },
    {
      "id": "end",
      "type": "EndNode",
      "name": "结束",
      "config": { "cleanup": true, "saveLogs": true }
    }
  ],
  "globalConfig": {
    "logLevel": "info",
    "screenshotOnError": true,
    "autoCleanup": true,
    "parallelExecution": false,
    "timeout": 180000
  }
}