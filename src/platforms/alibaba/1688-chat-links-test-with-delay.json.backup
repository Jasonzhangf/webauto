{
  "name": "1688旺旺链接测试（带商品+延迟）",
  "description": "从搜索结果中提取带商品的旺旺链接，间隔30秒访问",
  "version": "1.0.0",
  "preflows": ["1688-login-preflow-simple"],
  "nodes": [
    { "id": "start", "type": "StartNode", "name": "开始", "next": ["attach"] },
    {
      "id": "attach",
      "type": "AttachSessionNode",
      "name": "会话接力",
      "config": {},
      "next": ["navigate_search"]
    },
    {
      "id": "navigate_search",
      "type": "NavigationNode",
      "name": "导航到搜索结果页",
      "config": {
        "url": "https://s.1688.com/selloffer/offer_search.htm?keywords=%B7%FE%D7%B0",
        "waitUntil": "domcontentloaded",
        "timeout": 30000
      },
      "next": ["wait_search"]
    },
    {
      "id": "wait_search",
      "type": "WaitNode",
      "name": "等待搜索结果加载",
      "config": { "minMs": 3000, "maxMs": 5000 },
      "next": ["extract_links"]
    },
    {
      "id": "extract_links",
      "type": "PageSnapshotNode",
      "name": "提取带商品的旺旺链接",
      "config": {
        "script": "console.log('🔍 提取带商品的旺旺链接...'); const merchants = []; const offerItems = document.querySelectorAll('.sm-offer-item, .offer-item, .sm-offer, [class*=offer]'); console.log('找到 ' + offerItems.length + ' 个商品项'); for (let i = 0; i < Math.min(3, offerItems.length); i++) { const item = offerItems[i]; const title = item.querySelector('h4, [class*=title], a[title]'); const wangwangSpan = item.querySelector('span.J_WangWang, span[class*=WangWang]'); const wangwangLink = wangwangSpan ? wangwangSpan.querySelector('a.ww-link') : null; if (wangwangLink && wangwangLink.href && wangwangLink.href.includes('offerId')) { const merchantName = wangwangSpan.getAttribute('data-nick') || '未知商家'; const decodedName = decodeURIComponent(merchantName); merchants.push({ index: i, merchantName: decodedName, title: title ? title.textContent.trim().substring(0, 50) : '', chatUrl: wangwangLink.href, hasWangWang: true, hasOfferId: true }); console.log(`找到带商品的商家 ${i + 1}: ${decodedName}`); console.log(`聊天链接: ${wangwangLink.href}`); } } if (merchants.length === 0) { // 如果没有找到带offerId的链接，也提取普通链接作为备选 for (let i = 0; i < Math.min(2, offerItems.length); i++) { const item = offerItems[i]; const title = item.querySelector('h4, [class*=title], a[title]'); const wangwangSpan = item.querySelector('span.J_WangWang, span[class*=WangWang]'); const wangwangLink = wangwangSpan ? wangwangSpan.querySelector('a.ww-link') : null; if (wangwangLink && wangwangLink.href) { const merchantName = wangwangSpan.getAttribute('data-nick') || '未知商家'; const decodedName = decodeURIComponent(merchantName); merchants.push({ index: i, merchantName: decodedName, title: title ? title.textContent.trim().substring(0, 50) : '', chatUrl: wangwangLink.href, hasWangWang: true, hasOfferId: false }); console.log(`找到普通商家 ${i + 1}: ${decodedName}`); } } } console.log('总共提取到 ' + merchants.length + ' 个旺旺链接'); return { success: true, merchants: merchants, totalItems: offerItems.length, timestamp: new Date().toISOString() };",
        "saveScreenshots": true
      },
      "next": ["process_merchants"]
    },
    {
      "id": "process_merchants",
      "type": "PageSnapshotNode",
      "name": "处理商家数据",
      "config": {
        "script": "console.log('🔄 处理商家数据...'); const batchData = arguments[0] || {}; const merchants = batchData.merchants || []; console.log(`准备处理 ${merchants.length} 个商家`); if (merchants.length === 0) { return { success: false, error: '没有找到商家', finished: true }; } const currentMerchant = merchants[0]; console.log(`处理第一个商家: ${currentMerchant.title.substring(0, 30)}`); return { success: true, currentMerchant: currentMerchant, merchants: merchants, currentIndex: 0, totalToProcess: merchants.length, timestamp: new Date().toISOString() };",
        "saveScreenshots": true
      },
      "next": ["wait_before_first"]
    },
    {
      "id": "wait_before_first",
      "type": "WaitNode",
      "name": "首次访问前等待",
      "config": { "minMs": 2000, "maxMs": 3000 },
      "next": ["visit_first"]
    },
    {
      "id": "visit_first",
      "type": "NavigationNode",
      "name": "访问第一个商家",
      "config": {
        "url": "{{currentMerchant.chatUrl}}",
        "waitUntil": "domcontentloaded",
        "timeout": 20000
      },
      "next": ["wait_first"]
    },
    {
      "id": "wait_first",
      "type": "WaitNode",
      "name": "等待第一个页面加载",
      "config": { "minMs": 3000, "maxMs": 5000 },
      "next": ["prepare_second"]
    },
    {
      "id": "prepare_second",
      "type": "PageSnapshotNode",
      "name": "准备第二个商家",
      "config": {
        "script": "console.log('🔄 准备第二个商家...'); const batchData = arguments[0] || {}; const merchants = batchData.merchants || []; const currentIndex = batchData.currentIndex || 0; const nextIndex = currentIndex + 1; if (nextIndex < merchants.length) { const nextMerchant = merchants[nextIndex]; console.log(`准备第二个商家: ${nextMerchant.title.substring(0, 30)}`); return { success: true, currentMerchant: nextMerchant, merchants: merchants, currentIndex: nextIndex, timestamp: new Date().toISOString() }; } else { console.log('没有第二个商家'); return { success: false, finished: true, timestamp: new Date().toISOString() }; }",
        "saveScreenshots": true
      },
      "next": ["check_should_continue_second"]
    },
    {
      "id": "check_should_continue_second",
      "type": "NavigationNode",
      "name": "检查是否继续第二个",
      "config": {
        "url": "{{success ? 'javascript:void(0)' : 'https://www.1688.com/'}}",
        "waitUntil": "domcontentloaded",
        "timeout": 5000
      },
      "next": ["delay_before_second"]
    },
    {
      "id": "delay_before_second",
      "type": "WaitNode",
      "name": "间隔30秒等待",
      "config": { "minMs": 30000, "maxMs": 35000 },
      "next": ["visit_second"]
    },
    {
      "id": "visit_second",
      "type": "NavigationNode",
      "name": "访问第二个商家",
      "config": {
        "url": "{{currentMerchant.chatUrl}}",
        "waitUntil": "domcontentloaded",
        "timeout": 20000
      },
      "next": ["wait_second"]
    },
    {
      "id": "wait_second",
      "type": "WaitNode",
      "name": "等待第二个页面加载",
      "config": { "minMs": 3000, "maxMs": 5000 },
      "next": ["prepare_third"]
    },
    {
      "id": "prepare_third",
      "type": "PageSnapshotNode",
      "name": "准备第三个商家",
      "config": {
        "script": "console.log('🔄 准备第三个商家...'); const batchData = arguments[0] || {}; const merchants = batchData.merchants || []; const currentIndex = batchData.currentIndex || 0; const nextIndex = currentIndex + 1; if (nextIndex < merchants.length) { const nextMerchant = merchants[nextIndex]; console.log(`准备第三个商家: ${nextMerchant.title.substring(0, 30)}`); return { success: true, currentMerchant: nextMerchant, merchants: merchants, currentIndex: nextIndex, timestamp: new Date().toISOString() }; } else { console.log('没有第三个商家'); return { success: false, finished: true, timestamp: new Date().toISOString() }; }",
        "saveScreenshots": true
      },
      "next": ["delay_before_third"]
    },
    {
      "id": "delay_before_third",
      "type": "WaitNode",
      "name": "间隔30秒等待",
      "config": { "minMs": 30000, "maxMs": 35000 },
      "next": ["visit_third"]
    },
    {
      "id": "visit_third",
      "type": "NavigationNode",
      "name": "访问第三个商家",
      "config": {
        "url": "{{currentMerchant.chatUrl}}",
        "waitUntil": "domcontentloaded",
        "timeout": 20000
      },
      "next": ["wait_third"]
    },
    {
      "id": "wait_third",
      "type": "WaitNode",
      "name": "等待第三个页面加载",
      "config": { "minMs": 3000, "maxMs": 5000 },
      "next": ["save_results"]
    },
    {
      "id": "save_results",
      "type": "ResultSaverNode",
      "name": "保存测试结果",
      "config": {
        "outputDir": "workflows/records",
        "filenameTemplate": "1688-chat-links-test-with-delay-{timestamp}.json",
        "includeMetadata": true
      },
      "next": ["end"]
    },
    {
      "id": "end",
      "type": "EndNode",
      "name": "结束",
      "config": { "cleanup": false, "saveLogs": true }
    }
  ],
  "globalConfig": {
    "logLevel": "info",
    "screenshotOnError": true,
    "autoCleanup": false,
    "parallelExecution": false,
    "timeout": 600000
  }
}