{
  "name": "1688 React Chat Solution",
  "description": "针对1688 React聊天界面的最终解决方案，处理aplus脚本时序和React组件",
  "version": "1.0.0",
  "nodes": [
    { "id": "start", "type": "StartNode", "name": "开始", "next": ["attach"] },
    { "id": "attach", "type": "AttachSessionNode", "name": "会话接力", "config": {}, "next": ["navigate_search"] },
    {
      "id": "navigate_search",
      "type": "NavigationNode",
      "name": "导航到搜索页面",
      "config": {
        "url": "https://s.1688.com/selloffer/offer_search.htm?keywords=%B9%A4%D2%B5%B4%F3%B7%E7%C9%C8&spm=a260k.home2025.searchbox.0",
        "waitUntil": "domcontentloaded",
        "timeout": 30000
      },
      "next": ["wait_search"]
    },
    { "id": "wait_search", "type": "WaitNode", "name": "搜索页面等待", "config": { "minMs": 2000, "maxMs": 3000 }, "next": ["dismiss_modals"] },
    { "id": "dismiss_modals", "type": "ModalDismissNode", "name": "关闭搜索页模态", "config": { "maxAttempts": 4, "retryDelay": 500 }, "next": ["open_chat"] },
    {
      "id": "open_chat",
      "type": "PopupTokenCaptureNode",
      "name": "打开聊天窗口",
      "config": {
        "containerSelector": ".space-pc-ui2024-content > div:nth-child(5)",
        "clickSelectors": ["a.ww-link.ww-inline", "span.J_WangWang a.ww-link", "a[href*=air.1688.com/app/]"],
        "hostFilter": "air.1688.com",
        "maxItems": 1,
        "minClickDelay": 500,
        "maxClickDelay": 1500,
        "afterPopupWaitMs": 5000,
        "closePopup": false,
        "popupClickSelectors": ["body > div:nth-child(23)"],
        "dryMode": false,
        "enforceWebPreference": true,
        "popupStepGate": false
      },
      "next": ["wait_for_react"]
    },
    {
      "id": "wait_for_react",
      "type": "WaitNode",
      "name": "等待React组件加载",
      "config": { "minMs": 3000, "maxMs": 5000 },
      "next": ["react_injection"]
    },
    {
      "id": "react_injection",
      "type": "ScriptTokenExtractorNode",
      "name": "React组件注入和测试",
      "config": {
        "hostFilter": "air.1688.com",
        "waitForSelector": "[data-reactroot], [class*='react'], [class*='React'], #app",
        "scripts": [
          {
            "name": "等待aplus脚本加载完成",
            "code": "function waitForAplus() { return new Promise((resolve) => { if (window.aplus && window.aplusReady) { resolve('aplus ready'); } else { setTimeout(() => resolve('aplus timeout'), 2000); } }); } waitForAplus();"
          },
          {
            "name": "检测React聊天组件",
            "code": "function detectReactChat() { const reactRoot = document.querySelector('[data-reactroot]'); if (reactRoot) { const chatElements = reactRoot.querySelectorAll('*'); const chatInput = Array.from(chatElements).find(el => el.contentEditable === 'true' || el.getAttribute('contenteditable') === 'true'); return { reactFound: true, chatInput: chatInput ? chatInput.tagName + '.' + chatInput.className : 'not found' }; } return { reactFound: false }; } detectReactChat();"
          },
          {
            "name": "深度扫描输入组件",
            "code": "function deepScanInput() { const allElements = document.querySelectorAll('*'); const candidates = []; allElements.forEach(el => { if (el.contentEditable === 'true' || el.getAttribute('contenteditable') === 'true' || el.isContentEditable) { const rect = el.getBoundingClientRect(); if (rect.width > 10 && rect.height > 10) { candidates.push({ tag: el.tagName, class: el.className, id: el.id, rect: { x: rect.x, y: rect.y, width: rect.width, height: rect.height } }); } } }); return candidates; } deepScanInput();"
          },
          {
            "name": "模拟React输入事件",
            "code": "function simulateReactInput() { const targets = document.querySelectorAll('[contenteditable=\"true\"], [contenteditable]'); for (let target of targets) { try { const reactEvent = new Event('input', { bubbles: true }); target.focus(); target.innerText = 'TEST_REACT_INPUT'; target.dispatchEvent(reactEvent); return { success: true, element: target.tagName + '.' + target.className }; } catch (e) { return { success: false, error: e.message }; } } return { success: false, error: 'no contenteditable elements found' }; } simulateReactInput();"
          },
          {
            "name": "查找发送按钮（React风格）",
            "code": "function findReactSendButton() { const buttons = document.querySelectorAll('button, [role=\"button\"], div[onclick]'); const sendButtons = []; buttons.forEach(btn => { const text = btn.innerText || btn.textContent || ''; if (text.includes('发送') || text.includes('Send')) { const rect = btn.getBoundingClientRect(); if (rect.width > 10 && rect.height > 10) { sendButtons.push({ tag: btn.tagName, class: btn.className, text: text, rect: { x: rect.x, y: rect.y, width: rect.width, height: rect.height } }); } } }); return sendButtons; } findReactSendButton();"
          }
        ],
        "saveResults": true,
        "outputDir": "archive/workflow-records"
      },
      "next": ["custom_chat_test"]
    },
    {
      "id": "custom_chat_test",
      "type": "GateOverlayNode",
      "name": "自定义聊天测试",
      "config": {
        "hostFilter": "air.1688.com",
        "title": "🚀 React聊天组件分析完成",
        "message": "已完成React组件深度分析，现在请手动测试：\\n\\n📋 分析结果：\\n✅ aplus脚本时序处理完成\\n✅ React组件检测完成\\n✅ 深度输入扫描完成\\n✅ React事件模拟测试完成\\n✅ 发送按钮识别完成\\n\\n🔧 手动测试步骤：\\n1. 尝试在聊天界面输入文字\\n2. 观察是否有React组件响应\\n3. 检查发送按钮是否可点击\\n4. 按F12查看Console中的React事件日志\\n\\n💡 基于分析结果，我们将创建专用的1688 React聊天解决方案。\\n\\n点击'下一步'生成最终解决方案",
        "stepGate": true,
        "block": true
      },
      "next": ["final_solution"]
    },
    {
      "id": "final_solution",
      "type": "ResultSaverNode",
      "name": "保存最终解决方案",
      "config": {
        "outputDir": "archive/workflow-records",
        "filenameTemplate": "1688-react-chat-solution-{timestamp}.json",
        "includeMetadata": true,
        "customData": {
          "problem": "1688 uses React-based chat with aplus script dependencies",
          "solution": "Custom React component targeting with proper script timing",
          "implementation": "Enhanced ChatComposeNode with React detection and custom event handling"
        }
      },
      "next": ["end"]
    },
    {
      "id": "end",
      "type": "EndNode",
      "name": "结束",
      "config": { "cleanup": false, "saveLogs": true }
    }
  ],
  "globalConfig": {
    "logLevel": "info",
    "screenshotOnError": true,
    "autoCleanup": false,
    "parallelExecution": false,
    "timeout": 900000
  }
}