{
  "name": "1688搜索功能和商家链接分析",
  "description": "分析1688搜索功能、商家列表结构和旺旺链接提取方法",
  "version": "1.0.0",
  "preflows": ["1688-login-preflow"],
  "nodes": [
    { "id": "start", "type": "StartNode", "name": "开始", "next": ["attach"] },
    {
      "id": "attach",
      "type": "AttachSessionNode",
      "name": "会话接力",
      "config": {},
      "next": ["navigate_home"]
    },
    {
      "id": "navigate_home",
      "type": "NavigationNode",
      "name": "导航到1688主页",
      "config": {
        "url": "https://www.1688.com/",
        "waitUntil": "domcontentloaded",
        "timeout": 30000
      },
      "next": ["wait_home"]
    },
    {
      "id": "wait_home",
      "type": "WaitNode",
      "name": "等待主页稳定",
      "config": { "minMs": 2000, "maxMs": 3000 },
      "next": ["analyze_search_box"]
    },
    {
      "id": "analyze_search_box",
      "type": "PageSnapshotNode",
      "name": "分析搜索框结构",
      "config": {
        "script": "console.log('🔍 分析1688搜索框结构...'); const searchSelectors = ['#s-combobox-input', '.s-combobox-input', 'input[placeholder*=搜索]', 'input[data-spm*=search]', '.search-input', '[class*=search] input']; const searchBox = {}; searchSelectors.forEach(selector => { const element = document.querySelector(selector); if (element) { searchBox[selector] = { placeholder: element.placeholder, name: element.name, id: element.id, className: element.className, type: element.type, value: element.value, visible: element.offsetParent !== null }; } }); const searchButton = document.querySelector('.s-btn, .search-btn, [class*=search][class*=btn], button[type=submit]'); const searchForm = document.querySelector('#s-form, .search-form, form[action*=search]'); console.log('搜索框分析结果:', searchBox); return { success: true, searchBox, searchButton: searchButton ? { tagName: searchButton.tagName, text: searchButton.textContent, className: searchButton.className } : null, searchForm: searchForm ? { action: searchForm.action, method: searchForm.method } : null, currentUrl: window.location.href, pageTitle: document.title, timestamp: new Date().toISOString() };",
        "saveScreenshots": true
      },
      "next": ["input_search_keyword"]
    },
    {
      "id": "input_search_keyword",
      "type": "PageActionNode",
      "name": "输入搜索关键字",
      "config": {
        "action": "type",
        "selector": "#s-combobox-input",
        "text": "服装",
        "delay": 100
      },
      "next": ["wait_input"]
    },
    {
      "id": "wait_input",
      "type": "WaitNode",
      "name": "等待输入完成",
      "config": { "minMs": 500, "maxMs": 1000 },
      "next": ["submit_search"]
    },
    {
      "id": "submit_search",
      "type": "PageActionNode",
      "name": "提交搜索",
      "config": {
        "action": "click",
        "selector": ".s-btn",
        "waitForNavigation": true
      },
      "next": ["wait_search_results"]
    },
    {
      "id": "wait_search_results",
      "type": "WaitNode",
      "name": "等待搜索结果加载",
      "config": { "minMs": 3000, "maxMs": 5000 },
      "next": ["analyze_search_results"]
    },
    {
      "id": "analyze_search_results",
      "type": "PageSnapshotNode",
      "name": "分析搜索结果页面结构",
      "config": {
        "script": "console.log('🔍 分析1688搜索结果页面...'); const merchantSelectors = ['.sm-offer-item', '.offer-item', '.sm-offer', '[class*=offer]', '.product-item', '[class*=product]']; const merchantInfo = []; merchantSelectors.forEach(selector => { const elements = document.querySelectorAll(selector); if (elements.length > 0) { const firstElement = elements[0]; merchantInfo.push({ selector, count: elements.length, hasLink: !!firstElement.querySelector('a'), hasImage: !!firstElement.querySelector('img'), hasPrice: !!firstElement.querySelector('[class*=price], [data-price]'), hasTitle: !!firstElement.querySelector('[class*=title], h3, h4'), html: firstElement.outerHTML.substring(0, 500) }); } }); const contactSelectors = ['[class*=contact]', '[class*=chat]', [class*=talk], '[class*=im]', '[class*=旺旺]', '.sm-im', '.s-im', '[data-im]']; const contactInfo = []; contactSelectors.forEach(selector => { const elements = document.querySelectorAll(selector); if (elements.length > 0) { contactInfo.push({ selector, count: elements.length, examples: Array.from(elements).slice(0, 3).map(el => ({ text: el.textContent, className: el.className, href: el.href })); } }); }); const pagination = document.querySelector('.ui-pagination, .pagination, [class*=page]'); console.log('商家信息分析:', merchantInfo); console.log('联系方式分析:', contactInfo); return { success: true, merchantInfo, contactInfo, hasPagination: !!pagination, paginationInfo: pagination ? pagination.outerHTML.substring(0, 200) : null, resultCount: document.querySelectorAll('.sm-offer-item, .offer-item').length, currentUrl: window.location.href, pageTitle: document.title, timestamp: new Date().toISOString() };",
        "saveScreenshots": true
      },
      "next": ["extract_merchant_links"]
    },
    {
      "id": "extract_merchant_links",
      "type": "PageSnapshotNode",
      "name": "提取商家旺旺链接",
      "config": {
        "script": "console.log('🔗 提取商家旺旺链接...'); const merchants = []; const offerItems = document.querySelectorAll('.sm-offer-item, .offer-item'); console.log(`找到 ${offerItems.length} 个商家`); offerItems.forEach((item, index) => { const title = item.querySelector('h4, [class*=title], a[title]'); const link = item.querySelector('a[href*=\\"1688.com\\"]'); const price = item.querySelector('[class*=price], [data-price]'); const image = item.querySelector('img[src]'); const contactButton = item.querySelector('[class*=contact], [class*=chat], [class*=im], [class*=旺旺]'); const merchantName = item.querySelector('[class*=company], [class*=name], [class*=shop]'); const merchantLink = link ? link.href : null; const contactLink = contactButton ? contactButton.href || contactButton.getAttribute('data-href') || contactButton.getAttribute('onclick') : null; merchants.push({ index, title: title ? title.textContent.trim() : '', merchantName: merchantName ? merchantName.textContent.trim() : '', price: price ? price.textContent.trim() : '', merchantLink, contactLink, contactButton: contactButton ? { className: contactButton.className, text: contactButton.textContent, href: contactButton.href } : null, image: image ? image.src : null }); }); console.log('提取的商家信息:', merchants); return { success: true, merchants, totalMerchants: merchants.length, currentUrl: window.location.href, timestamp: new Date().toISOString() };",
        "saveScreenshots": false
      },
      "next": ["check_pagination"]
    },
    {
      "id": "check_pagination",
      "type": "PageSnapshotNode",
      "name": "检查分页信息",
      "config": {
        "script": "console.log('📄 检查分页信息...'); const pagination = document.querySelector('.ui-pagination, .pagination'); let paginationInfo = null; if (pagination) { const currentPage = pagination.querySelector('.ui-page-active, .active, .current'); const totalPages = pagination.querySelectorAll('.ui-page-number, .page-number').length; const nextButton = pagination.querySelector('.ui-page-next, .next, [class*=next]:not(.disabled)'); const prevButton = pagination.querySelector('.ui-page-prev, .prev, [class*=prev]:not(.disabled)'); paginationInfo = { hasPagination: true, currentPage: currentPage ? currentPage.textContent.trim() : '1', totalPages: totalPages, hasNextPage: !!nextButton && !nextButton.classList.contains('disabled'), hasPrevPage: !!prevButton && !prevButton.classList.contains('disabled'), nextButtonClass: nextButton ? nextButton.className : null, prevButtonClass: prevButton ? prevButton.className : null }; } else { paginationInfo = { hasPagination: false }; } const urlParams = new URLSearchParams(window.location.search); const currentPageParam = urlParams.get('beginPage') || urlParams.get('page') || '1'; console.log('分页信息:', paginationInfo); return { success: true, paginationInfo, currentPageParam, currentUrl: window.location.href, timestamp: new Date().toISOString() };",
        "saveScreenshots": true
      },
      "next": ["save_analysis_results"]
    },
    {
      "id": "save_analysis_results",
      "type": "ResultSaverNode",
      "name": "保存分析结果",
      "config": {
        "outputDir": "archive/workflow-records",
        "filenameTemplate": "1688-search-analysis-{timestamp}.json",
        "includeMetadata": true
      },
      "next": ["end"]
    },
    {
      "id": "end",
      "type": "EndNode",
      "name": "保持页面打开",
      "config": { "cleanup": false, "saveLogs": true }
    }
  ],
  "globalConfig": {
    "logLevel": "info",
    "screenshotOnError": true,
    "autoCleanup": false,
    "parallelExecution": false,
    "timeout": 300000
  }
}