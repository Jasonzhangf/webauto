{
  "name": "1688 Advanced Chat Solution",
  "description": "高级1688聊天解决方案，使用JavaScript注入和深度DOM扫描",
  "version": "1.0.0",
  "nodes": [
    { "id": "start", "type": "StartNode", "name": "开始", "next": ["attach"] },
    { "id": "attach", "type": "AttachSessionNode", "name": "会话接力", "config": {}, "next": ["navigate_search"] },
    {
      "id": "navigate_search",
      "type": "NavigationNode",
      "name": "导航到搜索页面",
      "config": {
        "url": "https://s.1688.com/selloffer/offer_search.htm?keywords=%B9%A4%D2%B5%B4%F3%B7%E7%C9%C8&spm=a260k.home2025.searchbox.0",
        "waitUntil": "domcontentloaded",
        "timeout": 30000
      },
      "next": ["wait_search"]
    },
    { "id": "wait_search", "type": "WaitNode", "name": "搜索页面等待", "config": { "minMs": 2000, "maxMs": 3000 }, "next": ["dismiss_modals"] },
    { "id": "dismiss_modals", "type": "ModalDismissNode", "name": "关闭搜索页模态", "config": { "maxAttempts": 4, "retryDelay": 500 }, "next": ["open_chat"] },
    {
      "id": "open_chat",
      "type": "PopupTokenCaptureNode",
      "name": "打开聊天窗口",
      "config": {
        "containerSelector": ".space-pc-ui2024-content > div:nth-child(5)",
        "clickSelectors": ["a.ww-link.ww-inline", "span.J_WangWang a.ww-link", "a[href*=air.1688.com/app/]"],
        "hostFilter": "air.1688.com",
        "maxItems": 1,
        "minClickDelay": 500,
        "maxClickDelay": 1500,
        "afterPopupWaitMs": 3000,
        "closePopup": false,
        "popupClickSelectors": ["body > div:nth-child(23)"],
        "dryMode": false,
        "enforceWebPreference": true,
        "popupStepGate": false
      },
      "next": ["javascript_analysis"]
    },
    {
      "id": "javascript_analysis",
      "type": "ScriptTokenExtractorNode",
      "name": "JavaScript深度分析",
      "config": {
        "hostFilter": "air.1688.com",
        "scripts": [
          {
            "name": "Shadow DOM扫描",
            "code": "function scanShadowDOM() { const results = []; document.querySelectorAll('*').forEach(el => { if (el.shadowRoot) { const shadowContent = el.shadowRoot.innerHTML; results.push({ element: el.tagName, shadowContent: shadowContent }); } }); return results; } scanShadowDOM();"
          },
          {
            "name": "iframe内容扫描",
            "code": "function scanIframes() { const results = []; document.querySelectorAll('iframe').forEach((frame, index) => { try { const doc = frame.contentDocument || frame.contentWindow.document; results.push({ index: index, content: doc.body.innerHTML, url: frame.src }); } catch(e) { results.push({ index: index, error: e.message, url: frame.src }); } }); return results; } scanIframes();"
          },
          {
            "name": "React组件扫描",
            "code": "function scanReactComponents() { const results = []; const walker = document.createTreeWalker(document.body, NodeFilter.SHOW_ELEMENT); let node; while (node = walker.nextNode()) { const reactKey = Object.keys(node).find(key => key.startsWith('__react')); if (reactKey) { results.push({ element: node.tagName, className: node.className, reactKey: reactKey }); } } return results; } scanReactComponents();"
          },
          {
            "name": "事件监听器扫描",
            "code": "function scanEventListeners() { const results = []; document.querySelectorAll('*').forEach(el => { const events = ['onclick', 'oninput', 'onkeydown', 'onkeyup', 'onchange']; const activeEvents = events.filter(event => el[event]); if (activeEvents.length > 0) { results.push({ element: el.tagName, className: node.className, events: activeEvents }); } }); return results; } scanEventListeners();"
          },
          {
            "name": "自定义属性扫描",
            "code": "function scanCustomAttributes() { const results = []; document.querySelectorAll('*').forEach(el => { const attrs = {}; for (let attr of el.attributes) { if (attr.name.startsWith('data-') || attr.name.includes('-') || attr.name.includes('_')) { attrs[attr.name] = attr.value; } } if (Object.keys(attrs).length > 0) { results.push({ element: el.tagName, className: el.className, attributes: attrs }); } }); return results; } scanCustomAttributes();"
          }
        ],
        "saveResults": true,
        "outputDir": "archive/workflow-records"
      },
      "next": ["advanced_input_test"]
    },
    {
      "id": "advanced_input_test",
      "type": "ScriptTokenExtractorNode",
      "name": "高级输入测试",
      "config": {
        "hostFilter": "air.1688.com",
        "scripts": [
          {
            "name": "模拟用户输入",
            "code": "function simulateInput() { const event = new KeyboardEvent('keydown', { key: 'H', code: 'KeyH', keyCode: 72, which: 72, bubbles: true }); document.body.dispatchEvent(event); document.body.dispatchEvent(new KeyboardEvent('keyup', { key: 'H', bubbles: true })); return '模拟输入H键'; } simulateInput();"
          },
          {
            "name": "查找可编辑区域",
            "code": "function findEditableAreas() { const results = []; const testText = 'TEST_INPUT'; document.querySelectorAll('*').forEach(el => { try { el.focus(); el.click(); if (el.selectionStart !== undefined || el.isContentEditable || el.contentEditable === 'true') { el.value = testText; el.textContent = testText; results.push({ element: el.tagName, className: el.className, id: el.id, success: true }); } } catch(e) { results.push({ element: el.tagName, className: el.className, error: e.message }); } }); return results; } findEditableAreas();"
          },
          {
            "name": "全局输入事件监听",
            "code": "function setupInputListener() { let inputDetected = false; document.addEventListener('input', (e) => { inputDetected = true; console.log('输入事件检测:', e.target); }); document.addEventListener('keydown', (e) => { console.log('键盘事件:', e.key, e.target); }); setTimeout(() => { return inputDetected ? '检测到输入事件' : '未检测到输入事件'; }, 2000); } setupInputListener();"
          }
        ],
        "interactionDelay": 2000,
        "saveResults": true
      },
      "next": ["manual_chat_test"]
    },
    {
      "id": "manual_chat_test",
      "type": "GateOverlayNode",
      "name": "手动聊天测试",
      "config": {
        "hostFilter": "air.1688.com",
        "title": "🎯 高级聊天分析完成",
        "message": "已完成JavaScript深度分析，现在请手动测试：\\n\\n📋 分析结果：\\n✅ Shadow DOM扫描完成\\n✅ iframe内容扫描完成\\n✅ React组件识别完成\\n✅ 事件监听器映射完成\\n✅ 自定义属性扫描完成\\n\\n🔧 手动测试步骤：\\n1. 在聊天界面尝试输入文字\\n2. 观察是否有任何反应\\n3. 按F12查看Console中的事件日志\\n4. 检查是否有隐藏的输入组件被激活\\n\\n💡 如果找到输入方法，请记录具体步骤和元素信息。\\n\\n点击'下一步'保存分析结果",
        "stepGate": true,
        "block": true
      },
      "next": ["create_solution"]
    },
    {
      "id": "create_solution",
      "type": "ScriptTokenExtractorNode",
      "name": "生成解决方案",
      "config": {
        "hostFilter": "air.1688.com",
        "scripts": [
          {
            "name": "生成ChatComposeNode配置",
            "code": "function generateSolution() { const solution = { problem: '1688使用非标准聊天界面', solution: '需要JavaScript注入和虚拟事件处理', selectors: { inputSelectors: ['body', '[contenteditable]', '*'], sendSelectors: ['body', '*'] }, methods: ['simulate-keyboard-events', 'dispatch-input-events', 'react-props-injection'] }; return solution; } generateSolution();"
          }
        ],
        "saveResults": true
      },
      "next": ["save_solution"]
    },
    {
      "id": "save_solution",
      "type": "ResultSaverNode",
      "name": "保存解决方案",
      "config": {
        "outputDir": "archive/workflow-records",
        "filenameTemplate": "1688-advanced-chat-solution-{timestamp}.json",
        "includeMetadata": true
      },
      "next": ["end"]
    },
    {
      "id": "end",
      "type": "EndNode",
      "name": "结束",
      "config": { "cleanup": false, "saveLogs": true }
    }
  ],
  "globalConfig": {
    "logLevel": "info",
    "screenshotOnError": true,
    "autoCleanup": false,
    "parallelExecution": false,
    "timeout": 900000
  }
}