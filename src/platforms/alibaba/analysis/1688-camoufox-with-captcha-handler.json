{
  "name": "1688 Camoufox验证码处理测试",
  "description": "使用camoufox浏览器，集成验证码检测和自动处理功能",
  "version": "1.0.0",
  "nodes": [
    { "id": "start", "type": "StartNode", "name": "开始", "next": ["ensure_camoufox"] },

    {
      "id": "ensure_camoufox",
      "type": "CamoufoxEnsureNode",
      "name": "确保Camoufox可用",
      "config": {},
      "next": ["init_camoufox"]
    },

    {
      "id": "init_camoufox",
      "type": "BrowserInitNode",
      "name": "初始化Camoufox浏览器",
      "config": {
        "engine": "camoufox",
        "headless": false,
        "viewport": { "width": 1920, "height": 1080 },
        "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
        "strictAutomationMitigation": true,
        "extraHeaders": true
      },
      "next": ["attach_session"]
    },

    { "id": "attach_session", "type": "AttachSessionNode", "name": "会话接力", "config": {}, "next": ["navigate_home"] },

    {
      "id": "navigate_home",
      "type": "NavigationNode",
      "name": "导航到1688主页",
      "config": {
        "url": "https://www.1688.com/",
        "waitUntil": "domcontentloaded",
        "timeout": 30000
      },
      "next": ["wait_home"]
    },

    {
      "id": "wait_home",
      "type": "WaitNode",
      "name": "等待主页稳定",
      "config": { "minMs": 3000, "maxMs": 5000 },
      "next": ["check_captcha"]
    },

    {
      "id": "check_captcha",
      "type": "PageSnapshotNode",
      "name": "检查验证码状态",
      "config": {
        "script": "console.log('🔍 检查验证码状态...'); const pageTitle = document.title; const pageUrl = window.location.href; const isVerification = pageTitle.includes('验证码') || document.body.textContent.includes('验证码') || document.body.textContent.includes('verification') || document.querySelector('#nocaptcha') !== null; const hasCaptchaWidget = document.querySelector('#nocaptcha, [class*=\"nocaptcha\"], [class*=\"captcha\"]') !== null; const sliderElement = document.querySelector('.nc_wrapper, .nc_slide_wrapper, [class*=\"slider\"][id*=\"nc_\"]'); console.log('页面标题:', pageTitle); console.log('当前URL:', pageUrl); console.log('是否有验证码元素:', hasCaptchaWidget); console.log('是否有滑块元素:', !!sliderElement); return { success: true, pageTitle, pageUrl, isVerification, hasCaptchaWidget, hasSliderElement: !!sliderElement, hasNcaptcha: !!document.querySelector('#nocaptcha'), timestamp: new Date().toISOString() };",
        "saveScreenshots": true
      },
      "next": ["handle_captcha"]
    },

    {
      "id": "handle_captcha",
      "type": "PageSnapshotNode",
      "name": "处理验证码",
      "config": {
        "script": "console.log('🤖 开始处理验证码...'); const captchaWidget = document.querySelector('#nocaptcha'); if (captchaWidget) { console.log('找到验证码小部件'); try { const slider = document.querySelector('.nc_wrapper .nc_slide_track, [class*=\"nc_slide_track\"]'); if (slider) { console.log('找到滑块元素'); const sliderHandle = slider.querySelector('.nc_slide_handler, [class*=\"nc_slide_handler\"]'); if (sliderHandle) { console.log('开始拖拽验证码滑块...'); const sliderRect = sliderHandle.getBoundingClientRect(); const sliderWidth = sliderRect.width; const maxX = slider.parentElement ? slider.parentElement.offsetWidth - sliderWidth : 0; const targetX = maxX * 0.8; const startX = sliderRect.left; const currentX = startX; const distance = targetX - startX; const duration = 1000 + Math.random() * 2000; const startTime = Date.now(); console.log('滑块拖拽参数:', { startX, targetX, distance, duration }); // 模拟滑块拖拽 const moveStep = (timestamp) => { const elapsed = timestamp - startTime; if (elapsed >= duration) { console.log('滑块拖拽完成'); return true; } const progress = Math.min(elapsed / duration); const currentX = startX + (distance * progress); sliderHandle.style.transform = `translateX(${currentX}px)`; window.requestAnimationFrame(moveStep); }; window.requestAnimationFrame(moveStep); return { success: true, action: 'slider_drag_completed', timestamp: new Date().toISOString() }; } else { return { success: false, error: 'No slider element found' }; } } catch (error) { console.log('滑块处理失败:', error); return { success: false, error: error.message }; } } else { console.log('未找到验证码元素，可能是正常页面'); return { success: true, action: 'no_captcha_found' }; }",
        "saveScreenshots": true
      },
      "next": ["check_after_captcha"]
    },

    {
      "id": "check_after_captcha",
      "type": "WaitNode",
      "name": "等待验证码处理完成",
      "config": { "minMs": 2000, "maxMs": 3000 },
      "next": ["final_check"]
    },

    {
      "id": "final_check",
      "type": "PageSnapshotNode",
      "name": "最终状态检查",
      "config": {
        "script": "console.log('🔍 最终状态检查...'); const pageTitle = document.title; const pageUrl = window.location.href; const isVerification = pageTitle.includes('验证码') || document.body.textContent.includes('验证码') || document.body.textContent.includes('verification'); const hasNormalContent = document.querySelectorAll('.search-box, .nav-menu, .banner, [class*=\"search\"]').length > 0; const hasProducts = document.querySelectorAll('.offer-item, .product-item, [class*=\"offer\"]').length > 0; const isLogin = document.body.textContent.includes('登录') === false || document.querySelector('.user-name, [class*=\"user\"], [class*=\"login\"][style*=\"none\"]') !== null; console.log('最终页面标题:', pageTitle); console.log('当前URL:', pageUrl); console.log('是否还有验证码拦截:', isVerification); console.log('是否有正常主页内容:', hasNormalContent); console.log('是否有产品内容:', hasProducts); console.log('登录状态:', isLogin); return { success: !isVerification && (hasNormalContent || hasProducts), pageTitle, pageUrl, isVerification, hasNormalContent, hasProducts, isLogin, isHomepage: pageUrl.includes('1688.com') && !pageUrl.includes('s.1688.com'), timestamp: new Date().toISOString() };",
        "saveScreenshots": true
      },
      "next": ["save_results"]
    },

    {
      "id": "save_results",
      "type": "ResultSaverNode",
      "name": "保存测试结果",
      "config": {
        "outputDir": "archive/workflow-records",
        "filenameTemplate": "1688-camoufox-with-captcha-{timestamp}.json",
        "includeMetadata": true
      },
      "next": ["end"]
    },

    {
      "id": "end",
      "type": "EndNode",
      "name": "结束",
      "config": { "cleanup": false, "saveLogs": true }
    }
  ],
  "globalConfig": {
    "logLevel": "info",
    "screenshotOnError": true,
    "autoCleanup": false,
    "parallelExecution": false,
    "timeout": 900000
  }
}