{
  "name": "1688对话框发送按钮分析",
  "description": "登录1688并分析对话框页面结构和发送按钮元素",
  "version": "1.0.0",
  "preflows": ["1688-login-preflow"],
  "anchor": {
    "hostFilter": "1688.com",
    "selectors": [".userAvatarLogo img"],
    "requireVisible": true,
    "maxWaitMs": 600000,
    "pollIntervalMs": 1500,
    "highlight": true,
    "persistHighlight": true,
    "highlightLabel": "LOGIN_ANCHOR"
  },
  "nodes": [
    { "id": "start", "type": "StartNode", "name": "开始", "next": ["attach"] },
    {
      "id": "attach",
      "type": "AttachSessionNode",
      "name": "会话接力",
      "config": {},
      "next": ["navigate_to_chat"]
    },
    {
      "id": "navigate_to_chat",
      "type": "NavigationNode",
      "name": "导航到1688聊天页面",
      "config": {
        "url": "https://air.1688.com/app/ocms-fusion-components-1688/def_cbu_web_im/index.html",
        "waitUntil": "domcontentloaded",
        "timeout": 30000
      },
      "next": ["wait_chat_load"]
    },
    {
      "id": "wait_chat_load",
      "type": "WaitNode",
      "name": "等待聊天页面加载",
      "config": { "minMs": 5000, "maxMs": 8000 },
      "next": ["analyze_dialog_structure"]
    },
    {
      "id": "analyze_dialog_structure",
      "type": "PageSnapshotNode",
      "name": "分析对话框页面结构",
      "config": {
        "script": "console.log('🔍 开始分析1688对话框页面结构...'); const analysis = { timestamp: new Date().toISOString(), url: window.location.href, title: document.title }; const inputElements = []; document.querySelectorAll('textarea, input[type=\"text\"], input[type=\"email\"], [contenteditable], .chat-input, .message-input, [class*=\"input\"]').forEach((el, index) => { const rect = el.getBoundingClientRect(); inputElements.push({ index, tagName: el.tagName, className: el.className, id: el.id, placeholder: el.placeholder || el.getAttribute('placeholder') || '', visible: rect.width > 0 && rect.height > 0 && el.offsetParent !== null, rect: { width: rect.width, height: rect.height, x: rect.x, y: rect.y }, attributes: Array.from(el.attributes).map(attr => ({ name: attr.name, value: attr.value })), cssSelector: getCSSSelector(el) }); }); const buttonElements = []; document.querySelectorAll('button, [role=\"button\"], [class*=\"send\"], [class*=\"btn\"], input[type=\"submit\"], input[type=\"button\"]').forEach((el, index) => { const rect = el.getBoundingClientRect(); const text = el.textContent.trim() || el.value || el.getAttribute('aria-label') || ''; buttonElements.push({ index, tagName: el.tagName, className: el.className, id: el.id, text: text, visible: rect.width > 0 && rect.height > 0 && el.offsetParent !== null, rect: { width: rect.width, height: rect.height, x: rect.x, y: rect.y }, attributes: Array.from(el.attributes).map(attr => ({ name: attr.name, value: attr.value })), cssSelector: getCSSSelector(el), isSendButton: text.includes('发送') || text.includes('Send') || el.className.includes('send') || el.className.includes('submit') }); }); const sendCandidates = buttonElements.filter(btn => btn.isSendButton); analysis.inputElements = inputElements; analysis.buttonElements = buttonElements; analysis.sendButtonCandidates = sendCandidates; analysis.totalInputs = inputElements.length; analysis.totalButtons = buttonElements.length; analysis.totalSendCandidates = sendCandidates.length; console.log(`📊 分析结果: ${analysis.totalInputs}个输入框, ${analysis.totalButtons}个按钮, ${analysis.totalSendCandidates}个发送按钮候选`); sendCandidates.forEach((btn, i) => { console.log(`📤 发送按钮候选${i+1}: ${btn.text} (${btn.cssSelector})`); }); function getCSSSelector(el) { if (el.id) return `#${el.id}; let path = []; while (el && el.nodeType === Node.ELEMENT_NODE) { let selector = el.nodeName.toLowerCase(); if (el.className) { const classes = el.className.split(' ').filter(c => c.trim()); if (classes.length > 0) { selector += '.' + classes.join('.'); } } path.unshift(selector); el = el.parentNode; } return path.join(' > '); } return analysis;",
        "saveScreenshots": true
      },
      "next": ["highlight_elements"]
    },
    {
      "id": "highlight_elements",
      "type": "JavaScriptExecutionNode",
      "name": "高亮显示关键元素",
      "config": {
        "script": "console.log('🎨 开始高亮关键元素...'); const highlightStyle = 'border: 3px solid red !important; background: rgba(255, 0, 0, 0.2) !important; z-index: 9999 !important; position: relative !important;'; const sendButtonStyle = 'border: 3px solid green !important; background: rgba(0, 255, 0, 0.2) !important; z-index: 9999 !important; position: relative !important;'; let highlightedCount = 0; document.querySelectorAll('textarea, input[type=\"text\"], [contenteditable], .chat-input, .message-input').forEach((el, index) => { if (el.getBoundingClientRect().width > 0 && el.getBoundingClientRect().height > 0) { el.style.cssText += highlightStyle; el.setAttribute('data-webauto-highlight', 'input-' + index); highlightedCount++; console.log(`✅ 高亮输入框 ${index + 1}: ${el.tagName}${el.className ? '.' + el.className.split(' ').join('.') : ''}`); } }); document.querySelectorAll('button, [role=\"button\"], [class*=\"send\"], [class*=\"btn\"]').forEach((el, index) => { const rect = el.getBoundingClientRect(); if (rect.width > 0 && rect.height > 0) { const text = el.textContent.trim() || el.value || ''; const isSend = text.includes('发送') || text.includes('Send') || el.className.includes('send') || el.className.includes('submit'); el.style.cssText += isSend ? sendButtonStyle : highlightStyle; el.setAttribute('data-webauto-highlight', isSend ? 'send-button-' + index : 'button-' + index); el.setAttribute('data-webauto-send', isSend ? '1' : '0'); highlightedCount++; console.log(`${isSend ? '📤' : '🔘'} 高亮${isSend ? '发送' : '普通'}按钮 ${index + 1}: ${text || '(无文本)'} (${el.tagName}${el.className ? '.' + el.className.split(' ').join('.') : ''})`); } }); console.log(`🎯 高亮完成! 总共高亮了 ${highlightedCount} 个元素`); return { success: true, highlightedCount: highlightedCount, timestamp: new Date().toISOString() };",
        "waitForResult": true
      },
      "next": ["extract_detailed_structure"]
    },
    {
      "id": "extract_detailed_structure",
      "type": "PageSnapshotNode",
      "name": "提取详细结构信息",
      "config": {
        "script": "console.log('🔬 提取详细结构信息...'); const detailedAnalysis = { timestamp: new Date().toISOString(), pageStructure: {}, chatContainers: [], inputMethods: [], sendMethods: [] }; const chatContainers = document.querySelectorAll('[class*=\"chat\"], [class*=\"im\"], [class*=\"message\"], [class*=\"dialog\"], [class*=\"conversation\"]'); chatContainers.forEach((container, index) => { const rect = container.getBoundingClientRect(); if (rect.width > 0 && rect.height > 0) { detailedAnalysis.chatContainers.push({ index, tagName: container.tagName, className: container.className, id: container.id, rect: { width: rect.width, height: rect.height, x: rect.x, y: rect.y }, childCount: container.children.length, cssSelector: getCSSSelector(container) }); } }); const possibleInputs = ['textarea', 'input[type=\"text\"]', 'input[type=\"email\"]', '[contenteditable=\"true\"]', '.chat-input', '.message-input', '[class*=\"input\"]', '[class*=\"textarea\"]']; possibleInputs.forEach(selector => { document.querySelectorAll(selector).forEach((el, index) => { const rect = el.getBoundingClientRect(); if (rect.width > 0 && rect.height > 0) { detailedAnalysis.inputMethods.push({ selector, index, tagName: el.tagName, className: el.className, id: el.id, placeholder: el.placeholder || '', rect: { width: rect.width, height: rect.height, x: rect.x, y: rect.y }, cssSelector: getCSSSelector(el) }); } }); }); const sendSelectors = ['button[type=\"submit\"]', '[class*=\"send\"]', '[class*=\"submit\"]', 'button:contains(\"发送\")', 'button:contains(\"Send\")', '[data-action=\"send\"]', '[role=\"button\"]:contains(\"发送\")']; sendSelectors.forEach(selector => { try { document.querySelectorAll(selector).forEach((el, index) => { const rect = el.getBoundingClientRect(); if (rect.width > 0 && rect.height > 0) { const text = el.textContent.trim() || el.value || ''; detailedAnalysis.sendMethods.push({ selector, index, tagName: el.tagName, className: el.className, id: el.id, text: text, rect: { width: rect.width, height: rect.height, x: rect.x, y: rect.y }, cssSelector: getCSSSelector(el), attributes: Array.from(el.attributes).map(attr => ({ name: attr.name, value: attr.value })) }); } }); } catch (e) { console.log(`选择器 ${selector} 执行失败:`, e.message); } }); const pageText = document.body.innerText; const hasChinese = /[\\u4e00-\\u9fff]/.test(pageText); detailedAnalysis.pageStructure = { hasChineseContent: hasChinese, totalElements: document.querySelectorAll('*').length, visibleButtons: document.querySelectorAll('button:not([style*=\"display: none\"]):not([hidden])').length, visibleInputs: document.querySelectorAll('textarea:not([style*=\"display: none\"]):not([hidden]), input[type=\"text\"]:not([style*=\"display: none\"]):not([hidden]), [contenteditable]:not([style*=\"display: none\"]):not([hidden])').length }; function getCSSSelector(el) { if (el.id) return `#${el.id}`; let path = []; while (el && el.nodeType === Node.ELEMENT_NODE) { let selector = el.nodeName.toLowerCase(); if (el.className) { const classes = el.className.split(' ').filter(c => c.trim()); if (classes.length > 0) { selector += '.' + classes.join('.'); } } path.unshift(selector); el = el.parentNode; } return path.join(' > '); } console.log(`📋 详细分析完成: ${detailedAnalysis.chatContainers.length}个聊天容器, ${detailedAnalysis.inputMethods.length}种输入方式, ${detailedAnalysis.sendMethods.length}种发送方式`); return detailedAnalysis;",
        "saveScreenshots": true
      },
      "next": ["save_analysis"]
    },
    {
      "id": "save_analysis",
      "type": "ResultSaverNode",
      "name": "保存分析结果",
      "config": {
        "outputDir": "archive/workflow-records",
        "filenameTemplate": "1688-chat-dialog-analysis-{timestamp}.json",
        "includeMetadata": true
      },
      "next": ["end"]
    },
    {
      "id": "end",
      "type": "EndNode",
      "name": "结束",
      "config": { "cleanup": false, "saveLogs": true }
    }
  ],
  "globalConfig": {
    "logLevel": "info",
    "screenshotOnError": true,
    "autoCleanup": false,
    "parallelExecution": false,
    "timeout": 600000
  }
}