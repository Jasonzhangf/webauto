{
  "name": "1688锚点高亮调试测试",
  "description": "调试1688页面锚点高亮功能，包含详细日志",
  "version": "1.0.0",
  "nodes": [
    { "id": "start", "type": "StartNode", "name": "开始", "next": ["ensure_camoufox"] },
    { "id": "ensure_camoufox", "type": "CamoufoxEnsureNode", "name": "Camoufox 校验/安装", "config": {}, "next": ["browser_init"] },
    {
      "id": "browser_init",
      "type": "BrowserInitNode",
      "name": "浏览器初始化",
      "config": {
        "engine": "camoufox",
        "headless": false,
        "viewport": { "width": 1920, "height": 1080 },
        "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
        "strictAutomationMitigation": false,
        "extraHeaders": false,
        "launchArgs": [
          "--disable-blink-features=AutomationControlled",
          "--disable-web-security",
          "--no-first-run",
          "--disable-default-apps",
          "--disable-sync",
          "--metrics-recording-only",
          "--disable-default-browser-check",
          "--disable-background-networking",
          "--disable-background-timer-throttling",
          "--disable-renderer-backgrounding",
          "--disable-backgrounding-occluded-windows",
          "--disable-extensions",
          "--disable-plugins-discovery",
          "--disable-ipc-flooding-protection",
          "--shuffle-messagetypes",
          "--disable-gpu",
          "--disable-dev-shm-usage",
          "--no-sandbox",
          "--disable-setuid-sandbox",
          "--lang=zh-CN",
          "--accept-lang=zh-CN,zh"
        ]
      },
      "next": ["load_cookies"]
    },
    {
      "id": "load_cookies",
      "type": "CookieLoaderNode",
      "name": "加载Cookie",
      "config": {
        "cookiePath": "~/.webauto/cookies/1688-domestic.json"
      },
      "next": ["navigate_search"]
    },
    {
      "id": "navigate_search",
      "type": "NavigationNode",
      "name": "导航到钢化膜搜索页",
      "config": {
        "url": "https://s.1688.com/selloffer/offer_search.htm?keywords=%B8%D6%BB%AF%C4%A4",
        "waitUntil": "domcontentloaded",
        "timeout": 30000
      },
      "next": ["page_analysis"]
    },
    {
      "id": "page_analysis",
      "type": "PageSnapshotNode",
      "name": "页面结构分析",
      "config": {
        "script": "console.log('🔍 开始页面结构分析...');\n\n// 分析页面基本结构\nconst pageUrl = window.location.href;\nconst pageTitle = document.title;\nconsole.log(`页面URL: ${pageUrl}`);\nconsole.log(`页面标题: ${pageTitle}`);\n\n// 分析所有可能的选择器\nconst allSelectors = [\n  '.sm-offer-item',\n  '.offer-item', \n  '.sm-offer',\n  '[class*=offer]',\n  '.sm-offer-item-wrapper',\n  '.s-widget-offer',\n  '.offer-list-item',\n  '.sm-offer-card',\n  '.sm-offer-list .sm-offer-item',\n  '.offer-list .offer-item',\n  '[class*=\"offer\"]',\n  '[class*=\"product\"]',\n  '[class*=\"item\"]'\n];\n\nconst selectorResults = {};\n\nfor (const selector of allSelectors) {\n  try {\n    const elements = document.querySelectorAll(selector);\n    selectorResults[selector] = {\n      count: elements.length,\n      visible: 0,\n      hasLink: 0\n    };\n    \n    elements.forEach((el, index) => {\n      // 检查可见性\n      const rect = el.getBoundingClientRect();\n      const isVisible = rect.width > 0 && rect.height > 0;\n      if (isVisible) selectorResults[selector].visible++;\n      \n      // 检查是否包含链接\n      const hasLink = el.querySelector('a[href*=\"1688.com\"]');\n      if (hasLink) selectorResults[selector].hasLink++;\n      \n      // 只显示前3个元素的详细信息\n      if (index < 3) {\n        console.log(`选择器 ${selector}[${index}]:`, {\n          text: el.textContent.trim().substring(0, 100),\n          visible: isVisible,\n          hasLink: !!hasLink,\n          rect: {\n            width: rect.width,\n            height: rect.height,\n            top: rect.top,\n            left: rect.left\n          }\n        });\n      }\n    });\n    \n    console.log(`选择器 ${selector}: 总数=${elements.length}, 可见=${selectorResults[selector].visible}, 有链接=${selectorResults[selector].hasLink}`);\n  } catch (e) {\n    console.error(`选择器 ${selector} 错误:`, e.message);\n    selectorResults[selector] = { error: e.message };\n  }\n}\n\n// 找到最佳选择器\nlet bestSelector = null;\nlet bestScore = 0;\n\nfor (const [selector, result] of Object.entries(selectorResults)) {\n  if (result.error) continue;\n  \n  const score = result.visible * 10 + result.hasLink * 5; // 可见元素权重更高\n  if (score > bestScore) {\n    bestScore = score;\n    bestSelector = selector;\n  }\n}\n\nconsole.log(`\\n🎯 最佳选择器: ${bestSelector} (得分: ${bestScore})`);\n\n// 创建调试信息面板\nconst debugPanel = document.createElement('div');\ndebugPanel.id = 'debug-panel';\ndebugPanel.innerHTML = `\n  <h3 style=\"color: #007aff; margin: 10px 0;\">🔍 页面分析结果</h3>\n  <p><strong>页面:</strong> ${pageTitle}</p>\n  <p><strong>最佳选择器:</strong> ${bestSelector || '未找到'}</p>\n  <p><strong>选择器得分:</strong> ${bestScore}</p>\n  <details style=\"margin: 10px 0;\">\n    <summary>详细选择器分析 (点击展开)</summary>\n    <div style=\"max-height: 200px; overflow-y: auto; font-size: 11px;\">\n      ${Object.entries(selectorResults).map(([selector, result]) => \n        `<p><strong>${selector}:</strong> 总数=${result.count || 0}, 可见=${result.visible || 0}, 有链接=${result.hasLink || 0}</p>`\n      ).join('')}\n    </div>\n  </details>\n  <p style=\"color: #ff3b30; font-size: 12px;\">等待5秒后开始锚点高亮测试...</p>\n`;\n\ndebugPanel.style.cssText = `\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  background: rgba(255, 255, 255, 0.95);\n  padding: 15px;\n  border-radius: 10px;\n  box-shadow: 0 4px 20px rgba(0,0,0,0.2);\n  z-index: 2147483647;\n  font-family: Arial, sans-serif;\n  font-size: 12px;\n  max-width: 400px;\n  border: 2px solid #007aff;\n`;\n\ndocument.body.appendChild(debugPanel);\n\n// 10秒后移除调试面板\nsetTimeout(() => {\n  try { debugPanel.remove(); } catch {}\n}, 10000);\n\nreturn {\n  success: true,\n  pageUrl,\n  pageTitle,\n  bestSelector,\n  bestScore,\n  selectorResults,\n  totalSelectors: allSelectors.length,\n  timestamp: new Date().toISOString()\n};",
        "saveScreenshots": true
      },
      "next": ["manual_highlight_test"]
    },
    {
      "id": "manual_highlight_test",
      "type": "PageSnapshotNode",
      "name": "手动高亮测试",
      "config": {
        "script": "console.log('🎨 开始手动高亮测试...');\n\n// 等待5秒确保页面完全加载\nawait new Promise(resolve => setTimeout(resolve, 5000));\n\n// 尝试找到并高亮元素\nconst selectors = [\n  '.sm-offer-item',\n  '.offer-item', \n  '.sm-offer',\n  '[class*=offer]',\n  '.sm-offer-item-wrapper'\n];\n\nlet targetElement = null;\nlet usedSelector = null;\n\nfor (const selector of selectors) {\n  const elements = document.querySelectorAll(selector);\n  console.log(`测试选择器 ${selector}: 找到 ${elements.length} 个元素`);\n  \n  for (let i = 0; i < Math.min(3, elements.length); i++) {\n    const el = elements[i];\n    const rect = el.getBoundingClientRect();\n    const isVisible = rect.width > 0 && rect.height > 0;\n    \n    if (isVisible) {\n      const hasLink = el.querySelector('a[href*=\"1688.com\"]');\n      if (hasLink) {\n        targetElement = el;\n        usedSelector = selector;\n        console.log(`找到目标元素: ${selector}[${i}]`);\n        break;\n      }\n    }\n  }\n  \n  if (targetElement) break;\n}\n\nif (!targetElement) {\n  console.error('未找到合适的目标元素');\n  \n  // 创建错误提示\n  const errorPanel = document.createElement('div');\n  errorPanel.innerHTML = `\n    <h3 style=\"color: #ff3b30;\">❌ 未找到目标元素</h3>\n    <p>无法找到可以高亮的商品项</p>\n    <p>页面URL: ${window.location.href}</p>\n  `;\n  errorPanel.style.cssText = `\n    position: fixed;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    background: rgba(255, 59, 48, 0.9);\n    color: white;\n    padding: 20px;\n    border-radius: 10px;\n    z-index: 2147483647;\n    text-align: center;\n  `;\n  document.body.appendChild(errorPanel);\n  \n  return { success: false, error: '未找到目标元素' };\n}\n\n// 手动创建多层高亮效果\nconsole.log('🎨 开始应用高亮效果...');\n\n// 1. 保存原始样式\nconst originalStyles = {\n  outline: targetElement.style.outline,\n  border: targetElement.style.border,\n  backgroundColor: targetElement.style.backgroundColor,\n  boxShadow: targetElement.style.boxShadow,\n  transition: targetElement.style.transition\n};\n\n// 2. 应用高亮样式\ntargetElement.style.outline = '4px solid #ff3b30';\ntargetElement.style.border = '3px solid #ff6b35';\ntargetElement.style.backgroundColor = 'rgba(255, 107, 53, 0.1)';\ntargetElement.style.boxShadow = '0 0 20px rgba(255, 59, 48, 0.6), 0 4px 15px rgba(255, 59, 48, 0.4)';\ntargetElement.style.transition = 'all 0.3s ease';\n\n// 3. 创建外部高亮框\nconst rect = targetElement.getBoundingClientRect();\nconst outerFrame = document.createElement('div');\nouterFrame.style.cssText = `\n  position: fixed;\n  left: ${rect.left - 6}px;\n  top: ${rect.top - 6}px;\n  width: ${rect.width + 12}px;\n  height: ${rect.height + 12}px;\n  border: 4px solid #ff3b30;\n  border-radius: 8px;\n  background: rgba(255, 59, 48, 0.05);\n  pointer-events: none;\n  z-index: 2147483646;\n  box-shadow: 0 0 30px rgba(255, 59, 48, 0.8);\n  animation: framePulse 2s infinite;\n`;\n\n// 4. 添加动画样式\nif (!document.querySelector('#highlight-animations')) {\n  const animStyle = document.createElement('style');\n  animStyle.id = 'highlight-animations';\n  animStyle.textContent = `\n    @keyframes framePulse {\n      0% { opacity: 1; transform: scale(1); }\n      50% { opacity: 0.7; transform: scale(1.01); }\n      100% { opacity: 1; transform: scale(1); }\n    }\n    @keyframes targetGlow {\n      0% { box-shadow: 0 0 20px rgba(255, 59, 48, 0.6); }\n      50% { box-shadow: 0 0 40px rgba(255, 59, 48, 0.9); }\n      100% { box-shadow: 0 0 20px rgba(255, 59, 48, 0.6); }\n    }\n  `;\n  document.head.appendChild(animStyle);\n}\n\ntargetElement.style.animation = 'targetGlow 2s infinite';\ndocument.body.appendChild(outerFrame);\n\n// 5. 创建标签\nconst label = document.createElement('div');\nlabel.textContent = '🎯 高亮目标';\nlabel.style.cssText = `\n  position: fixed;\n  left: ${rect.left + rect.width / 2 - 40}px;\n  top: ${rect.top - 40}px;\n  background: #ff3b30;\n  color: white;\n  padding: 6px 12px;\n  border-radius: 6px;\n  font-size: 14px;\n  font-weight: bold;\n  z-index: 2147483647;\n  box-shadow: 0 2px 10px rgba(0,0,0,0.4);\n  animation: labelBounce 1s ease-out;\n`;\n\n// 添加标签动画\nif (!document.querySelector('#label-animation')) {\n  const labelStyle = document.createElement('style');\n  labelStyle.id = 'label-animation';\n  labelStyle.textContent = `\n    @keyframes labelBounce {\n      0% { transform: translateY(-20px); opacity: 0; }\n      60% { transform: translateY(5px); }\n      100% { transform: translateY(0); opacity: 1; }\n    }\n  `;\n  document.head.appendChild(labelStyle);\n}\n\ndocument.body.appendChild(label);\n\n// 6. 创建状态面板\nconst statusPanel = document.createElement('div');\nstatusPanel.innerHTML = `\n  <h3 style=\"color: #34c759; margin: 10px 0;\">✅ 高亮测试成功</h3>\n  <p><strong>选择器:</strong> ${usedSelector}</p>\n  <p><strong>元素文本:</strong> ${targetElement.textContent.trim().substring(0, 50)}...</p>\n  <p><strong>元素尺寸:</strong> ${Math.round(rect.width)} × ${Math.round(rect.height)}</p>\n  <p><strong>高亮层数:</strong> 3层 (边框+外框+标签)</p>\n  <p style=\"color: #007aff;\">如果看到这个面板和高亮效果，说明功能正常！</p>\n`;\n\nstatusPanel.style.cssText = `\n  position: fixed;\n  top: 20px;\n  left: 20px;\n  background: rgba(52, 199, 89, 0.95);\n  color: white;\n  padding: 15px;\n  border-radius: 10px;\n  box-shadow: 0 4px 20px rgba(0,0,0,0.3);\n  z-index: 2147483647;\n  font-family: Arial, sans-serif;\n  font-size: 12px;\n  max-width: 350px;\n  border: 2px solid #32d74b;\n`;\n\ndocument.body.appendChild(statusPanel);\n\n// 7. 15秒后清理\nsetTimeout(() => {\n  try {\n    // 恢复原始样式\n    Object.assign(targetElement.style, originalStyles);\n    \n    // 移除添加的元素\n    outerFrame.remove();\n    label.remove();\n    statusPanel.remove();\n    \n    console.log('🧹 高亮测试清理完成');\n  } catch (e) {\n    console.warn('清理过程中出现错误:', e.message);\n  }\n}, 15000);\n\nconsole.log('✨ 高亮效果已应用，将在15秒后自动清理');\n\nreturn {\n  success: true,\n  usedSelector,\n  elementText: targetElement.textContent.trim().substring(0, 100),\n  elementSize: {\n    width: Math.round(rect.width),\n    height: Math.round(rect.height)\n  },\n  timestamp: new Date().toISOString()\n};",
        "saveScreenshots": true
      },
      "next": ["save_results"]
    },
    {
      "id": "save_results",
      "type": "ResultSaverNode",
      "name": "保存调试结果",
      "config": {
        "outputDir": "archive/workflow-records",
        "filenameTemplate": "1688-anchor-highlight-debug-{timestamp}.json",
        "includeMetadata": true,
        "mergeData": true
      },
      "next": ["end"]
    },
    {
      "id": "end",
      "type": "EndNode",
      "name": "结束",
      "config": { "cleanup": false, "saveLogs": true }
    }
  ],
  "globalConfig": {
    "logLevel": "debug",
    "screenshotOnError": true,
    "autoCleanup": false,
    "parallelExecution": false,
    "timeout": 120000
  }
}