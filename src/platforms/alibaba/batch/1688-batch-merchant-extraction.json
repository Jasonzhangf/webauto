{
  "name": "1688批量商家信息获取工作流",
  "description": "从主页搜索开始，批量获取商家信息和联系方式",
  "version": "1.0.0",
  "preflows": [
    "1688-login-preflow"
  ],
  "nodes": [
    { "id": "start", "type": "StartNode", "name": "开始", "next": ["attach"] },
    { "id": "attach", "type": "AttachSessionNode", "name": "会话接力", "config": {}, "next": ["navigate_homepage"] },
    {
      "id": "navigate_homepage",
      "type": "NavigationNode",
      "name": "导航到主页",
      "config": {
        "url": "https://www.1688.com/",
        "waitUntil": "networkidle",
        "timeout": 30000
      },
      "next": ["wait_homepage"]
    },
    {
      "id": "wait_homepage",
      "type": "WaitNode",
      "name": "等待主页稳定",
      "config": { "minMs": 2000, "maxMs": 3000 },
      "next": ["find_search_box"]
    },
    {
      "id": "find_search_box",
      "type": "PageSnapshotNode",
      "name": "查找搜索框",
      "config": {
        "script": "console.log('🔍 查找搜索框...'); const searchSelectors = ['input[placeholder*=\"搜索\"]', 'input[type=\"search\"]', '.search-input', '#q', 'input[name=\"q\"]']; let searchInput = null; let foundSelector = null; for (const selector of searchSelectors) { const element = document.querySelector(selector); if (element) { searchInput = element; foundSelector = selector; break; } } if (searchInput) { console.log('✅ 找到搜索框:', foundSelector); searchInput.style.border = '3px solid blue'; searchInput.style.backgroundColor = 'lightblue'; } else { console.log('❌ 未找到搜索框'); } return { success: !!searchInput, selector: foundSelector, elementCount: searchSelectors.length, timestamp: new Date().toISOString() };",
        "saveScreenshots": true
      },
      "next": ["natural_search_input"]
    },
    {
      "id": "natural_search_input",
      "type": "PageSnapshotNode",
      "name": "自然输入搜索关键词",
      "config": {
        "script": "console.log('🔍 开始自然搜索行为模拟...'); const searchKeyword = '服装批发'; const searchSelectors = ['input[placeholder*=\"搜索\"]', 'input[type=\"search\"]', '.search-input', '#q', 'input[name=\"q\"]']; let searchInput = null; let foundSelector = null; for (const selector of searchSelectors) { const element = document.querySelector(selector); if (element) { searchInput = element; foundSelector = selector; break; } } if (searchInput) { console.log('✅ 找到搜索框:', foundSelector); searchInput.focus(); searchInput.click(); await new Promise(resolve => setTimeout(resolve, 500 + Math.random() * 500)); searchInput.value = ''; for (let i = 0; i < searchKeyword.length; i++) { searchInput.value += searchKeyword[i]; const event = new Event('input', { bubbles: true }); searchInput.dispatchEvent(event); await new Promise(resolve => setTimeout(resolve, 80 + Math.random() * 120)); } console.log('✅ 自然输入完成:', searchKeyword); } else { console.log('❌ 搜索框未找到'); } return { success: !!searchInput, selector: foundSelector, keyword: searchKeyword, timestamp: new Date().toISOString() };",
        "saveScreenshots": false
      },
      "next": ["wait_before_search"]
    },
    {
      "id": "wait_before_search",
      "type": "WaitNode",
      "name": "输入后等待模拟思考",
      "config": { "minMs": 800, "maxMs": 1500 },
      "next": ["execute_search"]
    },
    {
      "id": "execute_search",
      "type": "PageSnapshotNode",
      "name": "执行搜索",
      "config": {
        "script": "console.log('🔍 执行搜索...'); const searchSelectors = ['input[placeholder*=\"搜索\"]', 'input[type=\"search\"]', '.search-input', '#q', 'input[name=\"q\"]']; let searchInput = null; for (const selector of searchSelectors) { const element = document.querySelector(selector); if (element) { searchInput = element; break; } } if (searchInput) { const searchButtonSelectors = ['.search-btn', '.btn-search', 'button[type=\"submit\"]', '.search-button']; let searchButton = null; for (const selector of searchButtonSelectors) { const element = document.querySelector(selector); if (element) { searchButton = element; break; } } if (searchButton) { console.log('✅ 找到搜索按钮，点击搜索'); searchButton.click(); } else { console.log('✅ 未找到搜索按钮，使用回车键'); searchInput.focus(); const enterEvent = new KeyboardEvent('keydown', { key: 'Enter', code: 'Enter', keyCode: 13, which: 13, bubbles: true, cancelable: true }); searchInput.dispatchEvent(enterEvent); } } else { console.log('❌ 搜索框未找到'); } return { success: !!searchInput, timestamp: new Date().toISOString() };",
        "saveScreenshots": false
      },
      "next": ["wait_search_results"]
    },
    {
      "id": "wait_search_results",
      "type": "WaitNode",
      "name": "等待搜索结果",
      "config": { "minMs": 3000, "maxMs": 5000 },
      "next": ["check_search_page"]
    },
    {
      "id": "check_search_page",
      "type": "PageSnapshotNode",
      "name": "检查搜索结果页面",
      "config": {
        "script": "console.log('🔍 检查搜索结果页面...'); const currentUrl = window.location.href; const isSearchPage = currentUrl.includes('search.1688.com') || currentUrl.includes('offer'); const productSelectors = ['.sm-offer-item', '.offer-item', '.product-item', '.item']; let products = []; let foundSelector = null; for (const selector of productSelectors) { const elements = document.querySelectorAll(selector); if (elements.length > 0) { products = Array.from(elements); foundSelector = selector; break; } } console.log('当前URL:', currentUrl); console.log('是否搜索页:', isSearchPage); console.log('商品数量:', products.length); if (foundSelector) { console.log('使用选择器:', foundSelector); } return { success: isSearchPage && products.length > 0, url: currentUrl, isSearchPage, productCount: products.length, selector: foundSelector, timestamp: new Date().toISOString() };",
        "saveScreenshots": true
      },
      "next": ["extract_merchant_info"]
    },
    {
      "id": "extract_merchant_info",
      "type": "PageSnapshotNode",
      "name": "提取商家信息",
      "config": {
        "script": "console.log('📊 开始提取商家信息...'); const productSelector = '.sm-offer-item, .offer-item, .product-item, .item'; const products = Array.from(document.querySelectorAll(productSelector)); const merchantData = []; products.slice(0, 5).forEach((product, index) => { try { const titleEl = product.querySelector('.title, .product-title, h4, h3') || product; const title = titleEl.textContent?.trim() || '未知商品'; const priceEl = product.querySelector('.price, .cost, [class*=\"price\"]') || product; const price = priceEl.textContent?.trim() || '价格面议'; const contactBtn = product.querySelector('a[href*=\"contact\"], button[title*=\"联系\"], .contact-btn, .chat-btn'); const hasContact = !!contactBtn; const merchantEl = product.querySelector('.company, .shop, .merchant, [class*=\"shop\"]') || product; const merchantName = merchantEl.textContent?.trim() || `商家${index + 1}`; merchantData.push({ index: index + 1, title, price, merchantName, hasContact, contactSelector: contactBtn ? (contactBtn.tagName.toLowerCase() + (contactBtn.className ? '.' + contactBtn.className.split(' ').join('.') : '')) : null }); console.log(`✅ 提取商家 ${index + 1}: ${merchantName} - ${title}`); } catch (error) { console.error(`❌ 提取商家 ${index + 1} 信息失败:`, error.message); } }); console.log(`📊 总共提取 ${merchantData.length} 个商家信息`); return { success: merchantData.length > 0, merchantCount: merchantData.length, merchants: merchantData, timestamp: new Date().toISOString() };",
        "saveScreenshots": true
      },
      "next": ["save_merchant_data"]
    },
    {
      "id": "save_merchant_data",
      "type": "ResultSaverNode",
      "name": "保存商家数据",
      "config": {
        "outputDir": "archive/workflow-records",
        "filenameTemplate": "1688-batch-merchant-data-{timestamp}.json",
        "includeMetadata": true
      },
      "next": ["test_batch_chat"]
    },
    {
      "id": "test_batch_chat",
      "type": "PageSnapshotNode",
      "name": "测试批量聊天访问",
      "config": {
        "script": "console.log('💬 测试批量聊天访问...'); const productSelector = '.sm-offer-item, .offer-item, .product-item, .item'; const products = Array.from(document.querySelectorAll(productSelector)).slice(0, 2); const chatResults = []; for (let i = 0; i < products.length; i++) { try { const product = products[i]; const contactBtn = product.querySelector('a[href*=\"contact\"], button[title*=\"联系\"], .contact-btn, .chat-btn'); if (contactBtn) { console.log(`🔍 找到商家 ${i + 1} 联系按钮`); contactBtn.style.border = '3px solid green'; contactBtn.style.backgroundColor = 'lightgreen'; chatResults.push({ merchantIndex: i + 1, hasContact: true, buttonHighlighted: true }); } else { console.log(`❌ 商家 ${i + 1} 未找到联系按钮`); chatResults.push({ merchantIndex: i + 1, hasContact: false, buttonHighlighted: false }); } } catch (error) { console.error(`❌ 处理商家 ${i + 1} 聊天测试失败:`, error.message); chatResults.push({ merchantIndex: i + 1, hasContact: false, error: error.message }); } } console.log(`💬 批量聊天测试完成，处理 ${chatResults.length} 个商家`); return { success: chatResults.length > 0, testedCount: chatResults.length, results: chatResults, timestamp: new Date().toISOString() };",
        "saveScreenshots": true
      },
      "next": ["final_report"]
    },
    {
      "id": "final_report",
      "type": "ResultSaverNode",
      "name": "生成最终报告",
      "config": {
        "outputDir": "archive/workflow-records",
        "filenameTemplate": "1688-batch-processing-report-{timestamp}.json",
        "includeMetadata": true
      },
      "next": ["end"]
    },
    {
      "id": "end",
      "type": "EndNode",
      "name": "结束",
      "config": { "cleanup": false, "saveLogs": true }
    }
  ],
  "globalConfig": {
    "logLevel": "info",
    "screenshotOnError": true,
    "autoCleanup": false,
    "parallelExecution": false,
    "timeout": 300000
  }
}