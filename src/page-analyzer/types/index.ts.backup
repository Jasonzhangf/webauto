/**
 * 页面分析器类型定义
 */

import { Page } from 'playwright';

// ==================== 基础类型 ====================

export type ContainerType = 
export type ContainerType = 
  | "page" 
  | "main" 
  | "feed" 
  | "post" 
  | "item" 
  | "nav" 
  | "widget" 
  | "text" 
  | "scroll" 
  | "content" 
  | "navigation" 
  | "interaction" 
  | "pagination" 
  | "filter" 
  | "media" 
  | "comment" 
  | "user" 
  | "form" 
  | "sidebar" 
  | "header" 
  | "footer" 
  | "modal" 
  | "dropdown" 
  | "tab" 
  | "carousel" 
  | "unknown";
// ==================== 页面类型 ====================

export interface PageType {
  type: string;
  name: string;
  description: string;
  expectedContainers: string[];
  workflowTemplate: string;
  characteristics: PageCharacteristics;
}

export interface PageCharacteristics {
  scrollType: ScrollType;
  contentLoadType: ContentLoadType;
  interactionType: InteractionType;
  hasLogin: boolean;
  hasPagination: boolean;
  hasInfiniteScroll: boolean;
}

export interface PageTypeConfig {
  name: string;
  description: string;
  urlPattern: RegExp;
  expectedContainers: string[];
  workflowTemplate: string;
  characteristics: PageCharacteristics;
  priority: number;
}

// ==================== 容器发现 ====================

export interface DiscoveredContainer {
  id: string;
  selector: string;
  name: string;
  type: ContainerType;
  priority: number;
  specificity: number;
  rect: DOMRect;
  elementCount: number;
  capabilities: ContainerCapability[];
  events?: string[];
  metadata: ContainerMetadata;
}

export interface ContainerCapability {
  name: string;
  enabled: boolean;
  config: Record<string, any>;
  operations: string[];
}

export interface ContainerMetadata {
  discoveredAt: number;
  discoveryStrategy: string;
  elementTag: string;
  elementClasses: string[];
  innerHTMLLength: number;
  hasImages: boolean;
  hasLinks: boolean;
  hasVideos: boolean;
  isVisible: boolean;
  position?: string;
  zIndex?: number;
  contentLength?: number;
  interactionElements?: number;
  formElements?: number;
  mediaElements?: number;
}

export interface DiscoveryStrategy {
  name: string;
  priority: number;
  discover(page: Page): Promise<DiscoveredContainer[]>;
  isApplicable(url: string): boolean;
  getPriority(): number;
}

// ==================== 层次结构 ====================

export interface ContainerNode {
  container: DiscoveredContainer;
  children: ContainerNode[];
  parent?: ContainerNode;
  depth: number;
}

export interface ContainerHierarchy {
  rootNodes: ContainerNode[];
  allNodes: ContainerNode[];
  totalContainers: number;
  maxDepth: number;
  keyContainers: DiscoveredContainer[];
}

// ==================== 发现统计 ====================

export interface DiscoveryStats {
  totalCandidates: number;
  discoveredContainers: number;
  successRate: number;
  discoveryTime: number;
  strategies: string[];
  currentPage: string;
  pageTitle: string;
  capabilityEvaluationTime?: number;
}

// ==================== 页面分析结果 ====================

export interface PageAnalysisResult {
  pageType: PageType;
  containers: DiscoveredContainer[];
  hierarchy: ContainerHierarchy;
  stats: DiscoveryStats;
  capabilities?: CapabilityEvaluation[];
}

// ==================== 页面类型配置 ====================

export interface PageTypeConfig {
  name: string;
  description: string;
  urlPattern: RegExp;
  expectedContainers: string[];
  workflowTemplate: string;
  characteristics: PageCharacteristics;
  priority: number;
}

// ==================== 事件 ====================

export interface PageAnalysisEvent {
  type: 'analysis:started' | 'analysis:progress' | 'analysis:completed' | 'analysis:error';
  data: any;
  timestamp: number;
}

// 导出能力评估相关类型
export * from './CapabilityTypes.js';

// ==================== 层次结构类型 ====================

export interface HierarchyNode {
  container: DiscoveredContainer;
  children: HierarchyNode[];
  parent?: HierarchyNode;
  depth: number;
  siblings: HierarchyNode[];
}

export interface ContainerDiscoveryResult {
  containers: DiscoveredContainer[];
  hierarchy: ContainerHierarchy;
  stats: DiscoveryStats;
}
