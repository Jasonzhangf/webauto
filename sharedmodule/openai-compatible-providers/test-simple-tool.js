#!/usr/bin/env node

/**
 * ÁÆÄÂçïÁöÑQwenÂ∑•ÂÖ∑Ë∞ÉÁî®ÊµãËØï
 * Simple Qwen tool calling test
 */

const { QwenProvider } = require('./dist/index');
const path = require('path');

async function simpleToolTest() {
  console.log('üîß Simple Qwen Tool Calling Test...\n');

  try {
    // ÂàõÂª∫Qwen ProviderÂÆû‰æã
    console.log('1. Creating Qwen Provider...');
    const qwenProvider = new QwenProvider({
      name: 'qwen-simple-test',
      endpoint: 'https://chat.qwen.ai/api/v1/chat/completions',
      supportedModels: ['qwen-turbo', 'qwen-plus', 'qwen-max'],
      defaultModel: 'qwen-turbo',
      tokenStoragePath: path.join(process.env.HOME || process.env.USERPROFILE, '.webauto', 'auth', 'qwen-token.json')
    });

    console.log('‚úÖ Qwen Provider created successfully');

    // ÁÆÄÂçïÁöÑÂ∑•ÂÖ∑Ë∞ÉÁî®ÊµãËØï
    console.log('\n2. Testing simple tool calling...');
    
    const request = {
      model: 'qwen-turbo',
      messages: [
        {
          role: 'user',
          content: '‰Ω†Â•ΩÔºåËØ∑ÂëäËØâÊàëÁé∞Âú®ÁöÑÊó∂Èó¥'
        }
      ],
      tools: [
        {
          type: 'function',
          function: {
            name: 'get_current_time',
            description: 'Ëé∑ÂèñÂΩìÂâçÊó∂Èó¥',
            parameters: {
              type: 'object',
              properties: {
                timezone: {
                  type: 'string',
                  description: 'Êó∂Âå∫ÔºåÂ¶Ç Asia/Shanghai'
                }
              }
            }
          }
        }
      ]
    };

    console.log('üì§ Sending request with tool definition...');
    console.log('Tool defined: get_current_time');

    try {
      const response = await qwenProvider.chat(request);
      
      console.log('\n‚úÖ Request completed successfully!');
      console.log('üìä Response status:', response.choices ? 'Has choices' : 'No choices');
      
      if (response.choices && response.choices.length > 0) {
        const choice = response.choices[0];
        console.log('üìù Message content:', choice.message?.content || 'No content');
        
        if (choice.message?.tool_calls) {
          console.log('\nüîß Tool calls found:');
          choice.message.tool_calls.forEach((call, i) => {
            console.log(`  ${i+1}. ${call.function.name}(${JSON.stringify(call.function.arguments)})`);
          });
          console.log('\n‚úÖ Tool calling is working!');
        } else {
          console.log('\n‚ö†Ô∏è  No tool calls in response');
          console.log('This could mean:');
          console.log('  - Model doesn\'t think tool is needed for this request');
          console.log('  - Tool calling is supported but not invoked');
          console.log('  - Authentication issues');
        }
      }
      
      console.log('\nüéâ Test completed successfully!');
      
    } catch (error) {
      console.log('\n‚ùå Request failed:', error.message);
      if (error.response) {
        console.log('Status:', error.response.status);
        console.log('Data:', error.response.data);
      }
    }

  } catch (error) {
    console.error('\n‚ùå Test failed:', error.message);
    console.error('Stack:', error.stack);
  }
}

// ËøêË°åÊµãËØï
simpleToolTest();